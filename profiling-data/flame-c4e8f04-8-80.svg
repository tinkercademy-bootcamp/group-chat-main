<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="694.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="677" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="677" > </text>
<g id="frames">
<g >
<title>invoke_syscall (3,759,490 samples, 2.39%)</title><rect x="89.4" y="437" width="28.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="92.45" y="447.5" >i..</text>
</g>
<g >
<title>__sanitizer::ReadFileToBuffer (1,531,913 samples, 0.97%)</title><rect x="32.1" y="421" width="11.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="35.09" y="431.5" ></text>
</g>
<g >
<title>__sanitizer::InternalAlloc (1,559,768 samples, 0.99%)</title><rect x="77.6" y="453" width="11.7" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="80.58" y="463.5" ></text>
</g>
<g >
<title>skb_release_data (1,261,015 samples, 0.80%)</title><rect x="287.8" y="245" width="9.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="290.76" y="255.5" ></text>
</g>
<g >
<title>do_anonymous_page (1,720,932 samples, 1.09%)</title><rect x="467.1" y="277" width="12.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="470.05" y="287.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (21,574 samples, 0.01%)</title><rect x="89.3" y="453" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="92.29" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,983,470 samples, 1.26%)</title><rect x="117.7" y="437" width="14.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="120.66" y="447.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,728,910 samples, 1.10%)</title><rect x="531.3" y="197" width="13.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="534.34" y="207.5" ></text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (2,941,058 samples, 1.87%)</title><rect x="10.0" y="565" width="22.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.02" y="575.5" >[..</text>
</g>
<g >
<title>do_page_fault (1,983,470 samples, 1.26%)</title><rect x="117.7" y="341" width="14.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="120.66" y="351.5" ></text>
</g>
<g >
<title>operator new (1,179,868 samples, 0.75%)</title><rect x="659.0" y="389" width="8.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="661.96" y="399.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::broadcast_to_channel (52,834,327 samples, 33.59%)</title><rect x="762.7" y="485" width="396.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="765.68" y="495.5" >tt::chat::server::EpollServer::broadcast_to_channel</text>
</g>
<g >
<title>__pi_clear_page (1,559,768 samples, 0.99%)</title><rect x="77.6" y="37" width="11.7" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="80.58" y="47.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (7,947,856 samples, 5.05%)</title><rect x="680.3" y="453" width="59.7" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="683.34" y="463.5" >__asan..</text>
</g>
<g >
<title>do_mem_abort (2,745,999 samples, 1.75%)</title><rect x="372.4" y="437" width="20.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="375.37" y="447.5" ></text>
</g>
<g >
<title>__arm64_sys_sendto (9,664,125 samples, 6.14%)</title><rect x="833.9" y="309" width="72.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="836.90" y="319.5" >__arm64_..</text>
</g>
<g >
<title>vm_mmap_pgoff (162,395 samples, 0.10%)</title><rect x="30.9" y="325" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="33.87" y="335.5" ></text>
</g>
<g >
<title>invoke_syscall (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="341" width="30.9" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1162.09" y="351.5" >in..</text>
</g>
<g >
<title>do_page_fault (1,559,768 samples, 0.99%)</title><rect x="77.6" y="229" width="11.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="80.58" y="239.5" ></text>
</g>
<g >
<title>el0t_64_sync (2,538,896 samples, 1.61%)</title><rect x="493.7" y="437" width="19.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="496.70" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::rfind (6,029,187 samples, 3.83%)</title><rect x="434.7" y="485" width="45.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="437.73" y="495.5" >std:..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1,308,578 samples, 0.83%)</title><rect x="424.9" y="485" width="9.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="427.91" y="495.5" ></text>
</g>
<g >
<title>vfs_read (8,885,900 samples, 5.65%)</title><rect x="246.3" y="357" width="66.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="249.34" y="367.5" >vfs_read</text>
</g>
<g >
<title>el0t_64_sync_handler (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="405" width="30.9" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="1162.09" y="415.5" >el..</text>
</g>
<g >
<title>ep_poll (2,574,266 samples, 1.64%)</title><rect x="89.4" y="373" width="19.4" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="92.45" y="383.5" ></text>
</g>
<g >
<title>__arm64_sys_read (1,531,913 samples, 0.97%)</title><rect x="32.1" y="277" width="11.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="35.09" y="287.5" ></text>
</g>
<g >
<title>el0_da (1,728,910 samples, 1.10%)</title><rect x="531.3" y="261" width="13.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="534.34" y="271.5" ></text>
</g>
<g >
<title>el0_da (2,745,999 samples, 1.75%)</title><rect x="372.4" y="453" width="20.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="375.37" y="463.5" ></text>
</g>
<g >
<title>do_pte_missing (1,600,901 samples, 1.02%)</title><rect x="381.0" y="341" width="12.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="383.97" y="351.5" ></text>
</g>
<g >
<title>vfs_read (1,531,913 samples, 0.97%)</title><rect x="32.1" y="245" width="11.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="35.09" y="255.5" ></text>
</g>
<g >
<title>tt::chat::server::ChannelManager::get_members (4,449,610 samples, 2.83%)</title><rect x="782.6" y="469" width="33.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="785.56" y="479.5" >tt..</text>
</g>
<g >
<title>__asan_stack_malloc_2 (33,678,907 samples, 21.41%)</title><rect x="906.4" y="421" width="252.7" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="909.40" y="431.5" >__asan_stack_malloc_2</text>
</g>
<g >
<title>do_read_fault (1,983,470 samples, 1.26%)</title><rect x="117.7" y="261" width="14.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="120.66" y="271.5" ></text>
</g>
<g >
<title>__asan::AsanInitInternal (7,623,399 samples, 4.85%)</title><rect x="32.1" y="581" width="57.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="35.09" y="591.5" >__asan..</text>
</g>
<g >
<title>__sanitizer::ReadFromFile (1,531,913 samples, 0.97%)</title><rect x="32.1" y="405" width="11.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="35.09" y="415.5" ></text>
</g>
<g >
<title>__send (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="437" width="30.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1162.09" y="447.5" >__..</text>
</g>
<g >
<title>el0t_64_sync (10,809,223 samples, 6.87%)</title><rect x="825.3" y="405" width="81.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="828.30" y="415.5" >el0t_64_s..</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (1,270,952 samples, 0.81%)</title><rect x="99.2" y="341" width="9.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="102.23" y="351.5" ></text>
</g>
<g >
<title>__sanitizer::internal_read (1,531,913 samples, 0.97%)</title><rect x="32.1" y="389" width="11.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="35.09" y="399.5" ></text>
</g>
<g >
<title>do_pte_missing (1,559,768 samples, 0.99%)</title><rect x="77.6" y="165" width="11.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="80.58" y="175.5" ></text>
</g>
<g >
<title>apparmor_socket_sendmsg (2,950,794 samples, 1.88%)</title><rect x="868.8" y="245" width="22.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="871.84" y="255.5" >a..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::handle_name_command (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="501" width="30.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1162.09" y="511.5" >tt..</text>
</g>
<g >
<title>__asan_stack_malloc_2 (3,082,110 samples, 1.96%)</title><rect x="401.8" y="485" width="23.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="404.78" y="495.5" >_..</text>
</g>
<g >
<title>do_translation_fault (1,983,470 samples, 1.26%)</title><rect x="117.7" y="357" width="14.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="120.66" y="367.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;, __sanitizer::LargeMmapAllocatorPtrArrayStatic&gt;::Allocate (1,559,768 samples, 0.99%)</title><rect x="77.6" y="437" width="11.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="80.58" y="447.5" ></text>
</g>
<g >
<title>__arm64_sys_epoll_pwait (2,574,266 samples, 1.64%)</title><rect x="89.4" y="421" width="19.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="92.45" y="431.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (1,983,470 samples, 1.26%)</title><rect x="117.7" y="469" width="14.8" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="120.66" y="479.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (3,027,425 samples, 1.92%)</title><rect x="521.6" y="405" width="22.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="524.60" y="415.5" >_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1,670,103 samples, 1.06%)</title><rect x="667.8" y="453" width="12.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="670.81" y="463.5" ></text>
</g>
<g >
<title>ksys_read (1,531,913 samples, 0.97%)</title><rect x="32.1" y="261" width="11.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="35.09" y="271.5" ></text>
</g>
<g >
<title>lock_sock_nested (1,080,021 samples, 0.69%)</title><rect x="845.6" y="229" width="8.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="848.60" y="239.5" ></text>
</g>
<g >
<title>_dl_exception_create_format (4,531,718 samples, 2.88%)</title><rect x="43.6" y="405" width="34.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="46.58" y="415.5" >_d..</text>
</g>
<g >
<title>invoke_syscall (21,574 samples, 0.01%)</title><rect x="89.3" y="517" width="0.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="92.29" y="527.5" ></text>
</g>
<g >
<title>do_anonymous_page (2,538,896 samples, 1.61%)</title><rect x="493.7" y="277" width="19.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="496.70" y="287.5" ></text>
</g>
<g >
<title>d_path (1,531,913 samples, 0.97%)</title><rect x="32.1" y="149" width="11.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="35.09" y="159.5" ></text>
</g>
<g >
<title>__sanitizer::MemoryMappingLayout::CacheMemoryMappings (1,531,913 samples, 0.97%)</title><rect x="32.1" y="453" width="11.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="35.09" y="463.5" ></text>
</g>
<g >
<title>el0_svc (21,574 samples, 0.01%)</title><rect x="89.3" y="565" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="92.29" y="575.5" ></text>
</g>
<g >
<title>do_mem_abort (2,538,896 samples, 1.61%)</title><rect x="493.7" y="389" width="19.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="496.70" y="399.5" ></text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (10,564,457 samples, 6.72%)</title><rect x="10.0" y="597" width="79.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.02" y="607.5" >[ld-linux..</text>
</g>
<g >
<title>get_page_from_freelist (1,600,901 samples, 1.02%)</title><rect x="381.0" y="229" width="12.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="383.97" y="239.5" ></text>
</g>
<g >
<title>handle_pte_fault (1,983,470 samples, 1.26%)</title><rect x="117.7" y="293" width="14.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="120.66" y="303.5" ></text>
</g>
<g >
<title>__alloc_pages (1,720,932 samples, 1.09%)</title><rect x="467.1" y="197" width="12.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="470.05" y="207.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (21,574 samples, 0.01%)</title><rect x="89.3" y="485" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="92.29" y="495.5" ></text>
</g>
<g >
<title>__sanitizer::internal_strdup (1,559,768 samples, 0.99%)</title><rect x="77.6" y="469" width="11.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="80.58" y="479.5" ></text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (2,778,663 samples, 1.77%)</title><rect x="10.0" y="517" width="20.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.02" y="527.5" ></text>
</g>
<g >
<title>do_el0_svc (10,819,877 samples, 6.88%)</title><rect x="246.3" y="437" width="81.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="249.34" y="447.5" >do_el0_svc</text>
</g>
<g >
<title>__asan::AsanThread::ThreadStart (1,531,913 samples, 0.97%)</title><rect x="32.1" y="549" width="11.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="35.09" y="559.5" ></text>
</g>
<g >
<title>do_page_fault (2,745,999 samples, 1.75%)</title><rect x="372.4" y="405" width="20.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="375.37" y="415.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (33,678,907 samples, 21.41%)</title><rect x="906.4" y="437" width="252.7" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="909.40" y="447.5" >__asan_stack_malloc_2</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (162,395 samples, 0.10%)</title><rect x="30.9" y="517" width="1.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="33.87" y="527.5" ></text>
</g>
<g >
<title>do_mem_abort (1,559,768 samples, 0.99%)</title><rect x="77.6" y="261" width="11.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="80.58" y="271.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (1,563,059 samples, 0.99%)</title><rect x="43.6" y="309" width="11.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="46.58" y="319.5" ></text>
</g>
<g >
<title>tcp_write_xmit (2,131,571 samples, 1.36%)</title><rect x="1174.0" y="197" width="16.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1177.01" y="207.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.0 (1,303,314 samples, 0.83%)</title><rect x="89.4" y="341" width="9.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="92.45" y="351.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (162,395 samples, 0.10%)</title><rect x="30.9" y="341" width="1.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="33.87" y="351.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::AllocateBatch (1,559,768 samples, 0.99%)</title><rect x="77.6" y="357" width="11.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="80.58" y="367.5" ></text>
</g>
<g >
<title>sock_read_iter (7,003,653 samples, 4.45%)</title><rect x="260.5" y="341" width="52.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="263.46" y="351.5" >sock_..</text>
</g>
<g >
<title>do_translation_fault (2,538,896 samples, 1.61%)</title><rect x="493.7" y="373" width="19.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="496.70" y="383.5" ></text>
</g>
<g >
<title>el0t_64_sync_handler (1,728,910 samples, 1.10%)</title><rect x="531.3" y="277" width="13.0" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="534.34" y="287.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (4,940,157 samples, 3.14%)</title><rect x="621.9" y="437" width="37.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="624.90" y="447.5" >__a..</text>
</g>
<g >
<title>handle_pte_fault (1,559,768 samples, 0.99%)</title><rect x="77.6" y="181" width="11.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="80.58" y="191.5" ></text>
</g>
<g >
<title>__sanitizer::GetThreadStackAndTls (1,531,913 samples, 0.97%)</title><rect x="32.1" y="501" width="11.5" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="35.09" y="511.5" ></text>
</g>
<g >
<title>el0t_64_sync_handler (162,395 samples, 0.10%)</title><rect x="30.9" y="437" width="1.2" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="33.87" y="447.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (1,559,768 samples, 0.99%)</title><rect x="77.6" y="325" width="11.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="80.58" y="335.5" ></text>
</g>
<g >
<title>do_pte_missing (2,538,896 samples, 1.61%)</title><rect x="493.7" y="293" width="19.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="496.70" y="303.5" ></text>
</g>
<g >
<title>el0_svc (10,809,223 samples, 6.87%)</title><rect x="825.3" y="373" width="81.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="828.30" y="383.5" >el0_svc</text>
</g>
<g >
<title>el0t_64_sync (17,807,685 samples, 11.32%)</title><rect x="193.9" y="485" width="133.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="196.91" y="495.5" >el0t_64_sync</text>
</g>
<g >
<title>InitializeCommonInterceptors (4,531,718 samples, 2.88%)</title><rect x="43.6" y="549" width="34.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="46.58" y="559.5" >In..</text>
</g>
<g >
<title>el0t_64_sync_handler (1,559,768 samples, 0.99%)</title><rect x="77.6" y="293" width="11.7" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="80.58" y="303.5" ></text>
</g>
<g >
<title>post_alloc_hook (1,720,932 samples, 1.09%)</title><rect x="467.1" y="165" width="12.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="470.05" y="175.5" ></text>
</g>
<g >
<title>load_elf_binary (21,574 samples, 0.01%)</title><rect x="89.3" y="405" width="0.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="92.29" y="415.5" ></text>
</g>
<g >
<title>do_epoll_wait (2,574,266 samples, 1.64%)</title><rect x="89.4" y="389" width="19.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="92.45" y="399.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (1,179,868 samples, 0.75%)</title><rect x="659.0" y="373" width="8.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="661.96" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32LocalCache&lt;__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt; &gt;::Refill (1,563,059 samples, 0.99%)</title><rect x="43.6" y="341" width="11.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="46.58" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (6,120,025 samples, 3.89%)</title><rect x="621.9" y="469" width="45.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="624.90" y="479.5" >std:..</text>
</g>
<g >
<title>ep_send_events (1,303,314 samples, 0.83%)</title><rect x="89.4" y="357" width="9.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="92.45" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (10,974,537 samples, 6.98%)</title><rect x="680.3" y="485" width="82.4" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="683.34" y="495.5" >std::unor..</text>
</g>
<g >
<title>fmt::v9::basic_string_view&lt;char&gt;::basic_string_view&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1,179,868 samples, 0.75%)</title><rect x="512.7" y="453" width="8.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="515.75" y="463.5" ></text>
</g>
<g >
<title>___interceptor_read.part.0 (25,987,627 samples, 16.52%)</title><rect x="132.5" y="517" width="195.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="135.54" y="527.5" >___interceptor_read.part.0</text>
</g>
<g >
<title>read (24,028,092 samples, 15.28%)</title><rect x="147.2" y="501" width="180.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="150.24" y="511.5" >read</text>
</g>
<g >
<title>__asan_stack_malloc_2 (7,947,856 samples, 5.05%)</title><rect x="680.3" y="437" width="59.7" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="683.34" y="447.5" >__asan..</text>
</g>
<g >
<title>tcp_sendmsg (3,097,865 samples, 1.97%)</title><rect x="845.6" y="245" width="23.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="848.60" y="255.5" >t..</text>
</g>
<g >
<title>sock_recvmsg (7,003,653 samples, 4.45%)</title><rect x="260.5" y="325" width="52.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="263.46" y="335.5" >sock_..</text>
</g>
<g >
<title>__asan_stack_malloc_3 (2,538,896 samples, 1.61%)</title><rect x="493.7" y="469" width="19.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="496.70" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,531,718 samples, 2.88%)</title><rect x="43.6" y="501" width="34.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.58" y="511.5" >[l..</text>
</g>
<g >
<title>[libc.so.6] (146,684,075 samples, 93.27%)</title><rect x="89.4" y="581" width="1100.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="92.45" y="591.5" >[libc.so.6]</text>
</g>
<g >
<title>__arm64_sys_mmap (162,395 samples, 0.10%)</title><rect x="30.9" y="357" width="1.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="33.87" y="367.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (1,308,578 samples, 0.83%)</title><rect x="424.9" y="389" width="9.8" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="427.91" y="399.5" ></text>
</g>
<g >
<title>do_anonymous_page (1,600,901 samples, 1.02%)</title><rect x="381.0" y="325" width="12.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="383.97" y="335.5" ></text>
</g>
<g >
<title>__asan_stack_free_5 (4,015,536 samples, 2.55%)</title><rect x="327.5" y="517" width="30.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="330.52" y="527.5" >__..</text>
</g>
<g >
<title>el0t_64_sync_handler (1,983,470 samples, 1.26%)</title><rect x="117.7" y="405" width="14.8" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="120.66" y="415.5" ></text>
</g>
<g >
<title>__sanitizer::dl_iterate_phdr_cb (1,559,768 samples, 0.99%)</title><rect x="77.6" y="517" width="11.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="80.58" y="527.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (5,564,323 samples, 3.54%)</title><rect x="393.0" y="501" width="41.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="395.98" y="511.5" >voi..</text>
</g>
<g >
<title>get_page_from_freelist (1,720,932 samples, 1.09%)</title><rect x="467.1" y="181" width="12.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="470.05" y="191.5" ></text>
</g>
<g >
<title>__sanitizer::internal_allocator (2,968,659 samples, 1.89%)</title><rect x="55.3" y="357" width="22.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="58.31" y="367.5" >_..</text>
</g>
<g >
<title>el0t_64_sync (1,728,910 samples, 1.10%)</title><rect x="531.3" y="293" width="13.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="534.34" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (1,080,021 samples, 0.69%)</title><rect x="807.8" y="421" width="8.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="810.84" y="431.5" ></text>
</g>
<g >
<title>aa_inet_msg_perm (2,104,009 samples, 1.34%)</title><rect x="297.2" y="277" width="15.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="300.22" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (5,564,323 samples, 3.54%)</title><rect x="393.0" y="517" width="41.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="395.98" y="527.5" >std..</text>
</g>
<g >
<title>invoke_syscall (10,819,877 samples, 6.88%)</title><rect x="246.3" y="405" width="81.2" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="249.34" y="415.5" >invoke_sy..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1,670,103 samples, 1.06%)</title><rect x="667.8" y="485" width="12.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="670.81" y="495.5" ></text>
</g>
<g >
<title>apparmor_socket_recvmsg (1,873,412 samples, 1.19%)</title><rect x="260.5" y="309" width="14.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="263.46" y="319.5" ></text>
</g>
<g >
<title>el0t_64_sync_handler (3,001,623 samples, 1.91%)</title><rect x="457.4" y="421" width="22.6" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="460.44" y="431.5" >e..</text>
</g>
<g >
<title>tcp_sendmsg_locked (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="245" width="30.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1162.09" y="255.5" >tc..</text>
</g>
<g >
<title>__handle_mm_fault (2,538,896 samples, 1.61%)</title><rect x="493.7" y="325" width="19.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="496.70" y="335.5" ></text>
</g>
<g >
<title>operator delete (1,670,103 samples, 1.06%)</title><rect x="667.8" y="421" width="12.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="670.81" y="431.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (4,422,685 samples, 2.81%)</title><rect x="446.8" y="453" width="33.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="449.78" y="463.5" >__..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (4,449,610 samples, 2.83%)</title><rect x="782.6" y="437" width="33.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="785.56" y="447.5" >st..</text>
</g>
<g >
<title>__sanitizer::LoadedModule::set (1,559,768 samples, 0.99%)</title><rect x="77.6" y="485" width="11.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="80.58" y="495.5" ></text>
</g>
<g >
<title>do_translation_fault (3,001,623 samples, 1.91%)</title><rect x="457.4" y="373" width="22.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="460.44" y="383.5" >d..</text>
</g>
<g >
<title>__asan_stack_malloc_5 (4,708,863 samples, 2.99%)</title><rect x="357.6" y="501" width="35.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="360.65" y="511.5" >__..</text>
</g>
<g >
<title>skb_do_copy_data_nocache (2,017,844 samples, 1.28%)</title><rect x="853.7" y="213" width="15.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="856.70" y="223.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::end (1,080,021 samples, 0.69%)</title><rect x="774.5" y="469" width="8.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="777.45" y="479.5" ></text>
</g>
<g >
<title>el0t_64_sync (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="421" width="30.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1162.09" y="431.5" >el..</text>
</g>
<g >
<title>__aarch64_ldadd8_sync (1,308,578 samples, 0.83%)</title><rect x="424.9" y="373" width="9.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="427.91" y="383.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (1,179,868 samples, 0.75%)</title><rect x="659.0" y="405" width="8.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="661.96" y="415.5" ></text>
</g>
<g >
<title>show_map (1,531,913 samples, 0.97%)</title><rect x="32.1" y="197" width="11.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="35.09" y="207.5" ></text>
</g>
<g >
<title>seq_path (1,531,913 samples, 0.97%)</title><rect x="32.1" y="165" width="11.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="35.09" y="175.5" ></text>
</g>
<g >
<title>tcp_recvmsg_locked (3,026,232 samples, 1.92%)</title><rect x="274.5" y="277" width="22.7" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="277.52" y="287.5" >t..</text>
</g>
<g >
<title>do_el0_svc (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="373" width="30.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1162.09" y="383.5" >do..</text>
</g>
<g >
<title>__tcp_push_pending_frames (2,131,571 samples, 1.36%)</title><rect x="1174.0" y="213" width="16.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1177.01" y="223.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_1 (4,422,685 samples, 2.81%)</title><rect x="446.8" y="469" width="33.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="449.78" y="479.5" >__..</text>
</g>
<g >
<title>__sys_sendto (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="309" width="30.9" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1162.09" y="319.5" >__..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (162,395 samples, 0.10%)</title><rect x="30.9" y="485" width="1.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="33.87" y="495.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::run (146,684,075 samples, 93.27%)</title><rect x="89.4" y="549" width="1100.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="92.45" y="559.5" >tt::chat::server::EpollServer::run</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (10,564,457 samples, 6.72%)</title><rect x="10.0" y="613" width="79.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.02" y="623.5" >[ld-linux..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (4,531,718 samples, 2.88%)</title><rect x="43.6" y="485" width="34.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="46.58" y="495.5" >[l..</text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::deallocate (1,670,103 samples, 1.06%)</title><rect x="667.8" y="437" width="12.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="670.81" y="447.5" ></text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (4,531,718 samples, 2.88%)</title><rect x="43.6" y="421" width="34.0" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="46.58" y="431.5" >[l..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (1,080,021 samples, 0.69%)</title><rect x="774.5" y="453" width="8.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="777.45" y="463.5" ></text>
</g>
<g >
<title>inet_sendmsg (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="277" width="30.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1162.09" y="287.5" >in..</text>
</g>
<g >
<title>alloc_anon_folio (1,600,901 samples, 1.02%)</title><rect x="381.0" y="309" width="12.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="383.97" y="319.5" ></text>
</g>
<g >
<title>el0_svc_common.constprop.0 (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="357" width="30.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1162.09" y="367.5" >el..</text>
</g>
<g >
<title>__asan_stack_malloc_2 (4,940,157 samples, 3.14%)</title><rect x="621.9" y="421" width="37.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="624.90" y="431.5" >__a..</text>
</g>
<g >
<title>__asan_stack_malloc_2 (3,369,589 samples, 2.14%)</title><rect x="782.6" y="405" width="25.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="785.56" y="415.5" >_..</text>
</g>
<g >
<title>skb_attempt_defer_free (1,261,015 samples, 0.80%)</title><rect x="287.8" y="261" width="9.4" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="290.76" y="271.5" ></text>
</g>
<g >
<title>ksys_read (8,885,900 samples, 5.65%)</title><rect x="246.3" y="373" width="66.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="249.34" y="383.5" >ksys_read</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1,670,103 samples, 1.06%)</title><rect x="667.8" y="469" width="12.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="670.81" y="479.5" ></text>
</g>
<g >
<title>memset (2,055,579 samples, 1.31%)</title><rect x="891.0" y="293" width="15.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="893.98" y="303.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (2,911,531 samples, 1.85%)</title><rect x="588.4" y="437" width="21.8" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="591.37" y="447.5" >_..</text>
</g>
<g >
<title>el0_da (3,001,623 samples, 1.91%)</title><rect x="457.4" y="405" width="22.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="460.44" y="415.5" >e..</text>
</g>
<g >
<title>___interceptor_send.part.0 (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="453" width="30.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1162.09" y="463.5" >__..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::AllocateBatch (1,563,059 samples, 0.99%)</title><rect x="43.6" y="325" width="11.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="46.58" y="335.5" ></text>
</g>
<g >
<title>operator new (3,027,425 samples, 1.92%)</title><rect x="521.6" y="421" width="22.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="524.60" y="431.5" >o..</text>
</g>
<g >
<title>vma_alloc_zeroed_movable_folio (1,600,901 samples, 1.02%)</title><rect x="381.0" y="293" width="12.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="383.97" y="303.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (8,804,709 samples, 5.60%)</title><rect x="555.8" y="469" width="66.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="558.83" y="479.5" >void st..</text>
</g>
<g >
<title>get_page_from_freelist (1,559,768 samples, 0.99%)</title><rect x="77.6" y="53" width="11.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="80.58" y="63.5" ></text>
</g>
<g >
<title>get_random_u16 (1,933,977 samples, 1.23%)</title><rect x="313.0" y="389" width="14.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="316.01" y="399.5" ></text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (2,941,058 samples, 1.87%)</title><rect x="10.0" y="549" width="22.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.02" y="559.5" >[..</text>
</g>
<g >
<title>handle_mm_fault (3,001,623 samples, 1.91%)</title><rect x="457.4" y="341" width="22.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="460.44" y="351.5" >h..</text>
</g>
<g >
<title>__lruvec_stat_mod_folio (1,983,470 samples, 1.26%)</title><rect x="117.7" y="197" width="14.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="120.66" y="207.5" ></text>
</g>
<g >
<title>el0t_64_sync_handler (3,759,490 samples, 2.39%)</title><rect x="89.4" y="501" width="28.3" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="92.45" y="511.5" >e..</text>
</g>
<g >
<title>___interceptor_malloc (4,531,718 samples, 2.88%)</title><rect x="43.6" y="389" width="34.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="46.58" y="399.5" >__..</text>
</g>
<g >
<title>vma_expand (21,574 samples, 0.01%)</title><rect x="89.3" y="357" width="0.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="92.29" y="367.5" ></text>
</g>
<g >
<title>__send (10,809,223 samples, 6.87%)</title><rect x="825.3" y="421" width="81.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="828.30" y="431.5" >__send</text>
</g>
<g >
<title>do_mmap (162,395 samples, 0.10%)</title><rect x="30.9" y="309" width="1.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="33.87" y="319.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (6,120,025 samples, 3.89%)</title><rect x="621.9" y="453" width="45.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="624.90" y="463.5" >void..</text>
</g>
<g >
<title>fmt::v9::basic_string_view&lt;char&gt; fmt::v9::detail::to_string_view&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1,179,868 samples, 0.75%)</title><rect x="512.7" y="469" width="8.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="515.75" y="479.5" ></text>
</g>
<g >
<title>handle_pte_fault (1,600,901 samples, 1.02%)</title><rect x="381.0" y="357" width="12.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="383.97" y="367.5" ></text>
</g>
<g >
<title>rw_verify_area (1,882,247 samples, 1.20%)</title><rect x="246.3" y="341" width="14.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="249.34" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (1,556,394 samples, 0.99%)</title><rect x="610.2" y="453" width="11.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="613.22" y="463.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::AllocateBatch (1,559,768 samples, 0.99%)</title><rect x="77.6" y="405" width="11.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="80.58" y="415.5" ></text>
</g>
<g >
<title>__alloc_pages (1,600,901 samples, 1.02%)</title><rect x="381.0" y="245" width="12.0" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="383.97" y="255.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::PopulateFreeArray (1,728,910 samples, 1.10%)</title><rect x="531.3" y="309" width="13.0" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="534.34" y="319.5" ></text>
</g>
<g >
<title>inet_sendmsg (4,657,752 samples, 2.96%)</title><rect x="833.9" y="261" width="34.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="836.90" y="271.5" >in..</text>
</g>
<g >
<title>skb_free_head (1,261,015 samples, 0.80%)</title><rect x="287.8" y="229" width="9.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="290.76" y="239.5" ></text>
</g>
<g >
<title>do_mem_abort (1,728,910 samples, 1.10%)</title><rect x="531.3" y="245" width="13.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="534.34" y="255.5" ></text>
</g>
<g >
<title>el0t_64_sync (3,759,490 samples, 2.39%)</title><rect x="89.4" y="517" width="28.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="92.45" y="527.5" >e..</text>
</g>
<g >
<title>spdlog::details::registry::instance (1,983,470 samples, 1.26%)</title><rect x="117.7" y="517" width="14.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="120.66" y="527.5" ></text>
</g>
<g >
<title>fmt::v9::vformat[abi:cxx11] (4,563,196 samples, 2.90%)</title><rect x="521.6" y="485" width="34.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="524.60" y="495.5" >fm..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::handle_client_data (140,941,115 samples, 89.62%)</title><rect x="132.5" y="533" width="1057.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="135.54" y="543.5" >tt::chat::server::EpollServer::handle_client_data</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (1,531,913 samples, 0.97%)</title><rect x="32.1" y="309" width="11.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="35.09" y="319.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (1,179,868 samples, 0.75%)</title><rect x="659.0" y="357" width="8.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="661.96" y="367.5" ></text>
</g>
<g >
<title>do_epoll_pwait.part.0 (2,574,266 samples, 1.64%)</title><rect x="89.4" y="405" width="19.4" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="92.45" y="415.5" ></text>
</g>
<g >
<title>tcp_poll (1,303,314 samples, 0.83%)</title><rect x="89.4" y="309" width="9.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="92.45" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (3,027,425 samples, 1.92%)</title><rect x="521.6" y="469" width="22.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="524.60" y="479.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::rfind (6,029,187 samples, 3.83%)</title><rect x="434.7" y="501" width="45.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="437.73" y="511.5" >std:..</text>
</g>
<g >
<title>__handle_mm_fault (1,600,901 samples, 1.02%)</title><rect x="381.0" y="373" width="12.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="383.97" y="383.5" ></text>
</g>
<g >
<title>exec_binprm (21,574 samples, 0.01%)</title><rect x="89.3" y="437" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="92.29" y="447.5" ></text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (162,395 samples, 0.10%)</title><rect x="30.9" y="469" width="1.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="33.87" y="479.5" ></text>
</g>
<g >
<title>el0t_64_sync (1,983,470 samples, 1.26%)</title><rect x="117.7" y="421" width="14.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="120.66" y="431.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (1,720,932 samples, 1.09%)</title><rect x="467.1" y="213" width="12.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="470.05" y="223.5" ></text>
</g>
<g >
<title>tcp_sendmsg (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="261" width="30.9" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1162.09" y="271.5" >tc..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::GetFromAllocator (1,728,910 samples, 1.10%)</title><rect x="531.3" y="341" width="13.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="534.34" y="351.5" ></text>
</g>
<g >
<title>el0t_64_sync (162,395 samples, 0.10%)</title><rect x="30.9" y="453" width="1.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="33.87" y="463.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::send_message (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="469" width="30.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1162.09" y="479.5" >tt..</text>
</g>
<g >
<title>el0_da (1,559,768 samples, 0.99%)</title><rect x="77.6" y="277" width="11.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="80.58" y="287.5" ></text>
</g>
<g >
<title>search_binary_handler (21,574 samples, 0.01%)</title><rect x="89.3" y="421" width="0.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="92.29" y="431.5" ></text>
</g>
<g >
<title>el0t_64_sync (3,001,623 samples, 1.91%)</title><rect x="457.4" y="437" width="22.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="460.44" y="447.5" >e..</text>
</g>
<g >
<title>do_page_fault (2,538,896 samples, 1.61%)</title><rect x="493.7" y="357" width="19.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="496.70" y="367.5" ></text>
</g>
<g >
<title>el0_svc_common.constprop.0 (3,759,490 samples, 2.39%)</title><rect x="89.4" y="453" width="28.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="92.45" y="463.5" >e..</text>
</g>
<g >
<title>bprm_execve (21,574 samples, 0.01%)</title><rect x="89.3" y="469" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="92.29" y="479.5" ></text>
</g>
<g >
<title>el0_svc (162,395 samples, 0.10%)</title><rect x="30.9" y="421" width="1.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="33.87" y="431.5" ></text>
</g>
<g >
<title>do_pte_missing (1,720,932 samples, 1.09%)</title><rect x="467.1" y="293" width="12.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="470.05" y="303.5" ></text>
</g>
<g >
<title>__asan::AsanInitIsRunning (1,959,535 samples, 1.25%)</title><rect x="132.5" y="501" width="14.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="135.54" y="511.5" ></text>
</g>
<g >
<title>el0t_64_sync_handler (17,807,685 samples, 11.32%)</title><rect x="193.9" y="469" width="133.6" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="196.91" y="479.5" >el0t_64_sync_han..</text>
</g>
<g >
<title>filemap_map_pages (1,983,470 samples, 1.26%)</title><rect x="117.7" y="245" width="14.8" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="120.66" y="255.5" ></text>
</g>
<g >
<title>setup_arg_pages (21,574 samples, 0.01%)</title><rect x="89.3" y="389" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="92.29" y="399.5" ></text>
</g>
<g >
<title>set_pte_range (1,983,470 samples, 1.26%)</title><rect x="117.7" y="229" width="14.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="120.66" y="239.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,720,932 samples, 1.09%)</title><rect x="467.1" y="325" width="12.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="470.05" y="335.5" ></text>
</g>
<g >
<title>do_el0_svc (21,574 samples, 0.01%)</title><rect x="89.3" y="549" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="92.29" y="559.5" ></text>
</g>
<g >
<title>[libfmt.so.9.1.0] (1,535,771 samples, 0.98%)</title><rect x="544.3" y="453" width="11.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="547.31" y="463.5" ></text>
</g>
<g >
<title>el0_svc (17,807,685 samples, 11.32%)</title><rect x="193.9" y="453" width="133.6" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="196.91" y="463.5" >el0_svc</text>
</g>
<g >
<title>handle_mm_fault (1,559,768 samples, 0.99%)</title><rect x="77.6" y="213" width="11.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="80.58" y="223.5" ></text>
</g>
<g >
<title>__arm64_sys_execve (21,574 samples, 0.01%)</title><rect x="89.3" y="501" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="92.29" y="511.5" ></text>
</g>
<g >
<title>el0t_64_sync (2,745,999 samples, 1.75%)</title><rect x="372.4" y="485" width="20.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="375.37" y="495.5" ></text>
</g>
<g >
<title>do_translation_fault (1,728,910 samples, 1.10%)</title><rect x="531.3" y="229" width="13.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="534.34" y="239.5" ></text>
</g>
<g >
<title>vma_interval_tree_insert (162,395 samples, 0.10%)</title><rect x="30.9" y="277" width="1.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="33.87" y="287.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::parse_client_command (100,664,766 samples, 64.01%)</title><rect x="434.7" y="517" width="755.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="437.73" y="527.5" >tt::chat::server::EpollServer::parse_client_command</text>
</g>
<g >
<title>__asan::CreateMainThread (1,531,913 samples, 0.97%)</title><rect x="32.1" y="565" width="11.5" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="35.09" y="575.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (1,308,578 samples, 0.83%)</title><rect x="424.9" y="421" width="9.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="427.91" y="431.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::send_message (45,736,217 samples, 29.08%)</title><rect x="815.9" y="469" width="343.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="818.94" y="479.5" >tt::chat::server::EpollServer::send_message</text>
</g>
<g >
<title>do_translation_fault (2,745,999 samples, 1.75%)</title><rect x="372.4" y="421" width="20.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="375.37" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1,983,470 samples, 1.26%)</title><rect x="117.7" y="485" width="14.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="120.66" y="495.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (3,027,425 samples, 1.92%)</title><rect x="521.6" y="437" width="22.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="524.60" y="447.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (3,026,681 samples, 1.92%)</title><rect x="740.0" y="453" width="22.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="742.97" y="463.5" >s..</text>
</g>
<g >
<title>el0t_64_sync (21,574 samples, 0.01%)</title><rect x="89.3" y="597" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="92.29" y="607.5" ></text>
</g>
<g >
<title>sock_poll (1,303,314 samples, 0.83%)</title><rect x="89.4" y="325" width="9.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="92.45" y="335.5" ></text>
</g>
<g >
<title>mmap_region (162,395 samples, 0.10%)</title><rect x="30.9" y="293" width="1.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="33.87" y="303.5" ></text>
</g>
<g >
<title>do_mem_abort (1,983,470 samples, 1.26%)</title><rect x="117.7" y="373" width="14.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="120.66" y="383.5" ></text>
</g>
<g >
<title>el0_svc_common.constprop.0 (21,574 samples, 0.01%)</title><rect x="89.3" y="533" width="0.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="92.29" y="543.5" ></text>
</g>
<g >
<title>el0_svc_common.constprop.0 (10,809,223 samples, 6.87%)</title><rect x="825.3" y="341" width="81.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="828.30" y="351.5" >el0_svc_c..</text>
</g>
<g >
<title>el0t_64_sync (1,559,768 samples, 0.99%)</title><rect x="77.6" y="309" width="11.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="80.58" y="319.5" ></text>
</g>
<g >
<title>__mod_node_page_state (1,983,470 samples, 1.26%)</title><rect x="117.7" y="181" width="14.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="120.66" y="191.5" ></text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (2,778,663 samples, 1.77%)</title><rect x="10.0" y="533" width="20.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.02" y="543.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt; &gt;::Refill (1,728,910 samples, 1.10%)</title><rect x="531.3" y="357" width="13.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="534.34" y="367.5" ></text>
</g>
<g >
<title>_start (146,684,075 samples, 93.27%)</title><rect x="89.4" y="613" width="1100.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="92.45" y="623.5" >_start</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (10,974,537 samples, 6.98%)</title><rect x="680.3" y="469" width="82.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="683.34" y="479.5" >std::__de..</text>
</g>
<g >
<title>invoke_syscall (10,809,223 samples, 6.87%)</title><rect x="825.3" y="325" width="81.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="828.30" y="335.5" >invoke_sy..</text>
</g>
<g >
<title>handle_pte_fault (2,538,896 samples, 1.61%)</title><rect x="493.7" y="309" width="19.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="496.70" y="319.5" ></text>
</g>
<g >
<title>do_el0_svc (1,531,913 samples, 0.97%)</title><rect x="32.1" y="325" width="11.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="35.09" y="335.5" ></text>
</g>
<g >
<title>folio_add_file_rmap_ptes (1,983,470 samples, 1.26%)</title><rect x="117.7" y="213" width="14.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="120.66" y="223.5" ></text>
</g>
<g >
<title>do_mem_abort (3,001,623 samples, 1.91%)</title><rect x="457.4" y="389" width="22.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="460.44" y="399.5" >d..</text>
</g>
<g >
<title>security_socket_sendmsg (2,950,794 samples, 1.88%)</title><rect x="868.8" y="261" width="22.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="871.84" y="271.5" >s..</text>
</g>
<g >
<title>__asan_stack_malloc_5 (4,708,863 samples, 2.99%)</title><rect x="357.6" y="517" width="35.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="360.65" y="527.5" >__..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (6,120,025 samples, 3.89%)</title><rect x="621.9" y="485" width="45.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="624.90" y="495.5" >std:..</text>
</g>
<g >
<title>vma_alloc_folio (1,600,901 samples, 1.02%)</title><rect x="381.0" y="277" width="12.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="383.97" y="287.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,538,896 samples, 1.61%)</title><rect x="493.7" y="341" width="19.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="496.70" y="351.5" ></text>
</g>
<g >
<title>alloc_anon_folio (1,267,944 samples, 0.81%)</title><rect x="503.2" y="261" width="9.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="506.23" y="271.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32LocalCache&lt;__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt; &gt;::Refill (1,559,768 samples, 0.99%)</title><rect x="77.6" y="421" width="11.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="80.58" y="431.5" ></text>
</g>
<g >
<title>shift_arg_pages (21,574 samples, 0.01%)</title><rect x="89.3" y="373" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="92.29" y="383.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::handle_channel_message (90,516,157 samples, 57.55%)</title><rect x="480.0" y="501" width="679.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="482.96" y="511.5" >tt::chat::server::EpollServer::handle_channel_message</text>
</g>
<g >
<title>el0_svc (3,759,490 samples, 2.39%)</title><rect x="89.4" y="485" width="28.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="92.45" y="495.5" >e..</text>
</g>
<g >
<title>__rmqueue_pcplist (1,600,901 samples, 1.02%)</title><rect x="381.0" y="197" width="12.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="383.97" y="207.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (1,270,952 samples, 0.81%)</title><rect x="493.7" y="261" width="9.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="496.70" y="271.5" ></text>
</g>
<g >
<title>__sanitizer_internal_memset (2,968,659 samples, 1.89%)</title><rect x="55.3" y="341" width="22.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="58.31" y="351.5" >_..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::PopulateFreeArray (1,728,910 samples, 1.10%)</title><rect x="531.3" y="325" width="13.0" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="534.34" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (1,080,021 samples, 0.69%)</title><rect x="807.8" y="405" width="8.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="810.84" y="415.5" ></text>
</g>
<g >
<title>set_user_sigmask (1,185,224 samples, 0.75%)</title><rect x="108.8" y="421" width="8.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="111.76" y="431.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (1,563,059 samples, 0.99%)</title><rect x="43.6" y="293" width="11.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="46.58" y="303.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (1,559,768 samples, 0.99%)</title><rect x="77.6" y="389" width="11.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="80.58" y="399.5" ></text>
</g>
<g >
<title>__sanitizer::IsRssLimitExceeded (1,179,868 samples, 0.75%)</title><rect x="659.0" y="341" width="8.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="661.96" y="351.5" ></text>
</g>
<g >
<title>dl_iterate_phdr (1,559,768 samples, 0.99%)</title><rect x="77.6" y="533" width="11.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="80.58" y="543.5" ></text>
</g>
<g >
<title>el0_svc (1,531,913 samples, 0.97%)</title><rect x="32.1" y="341" width="11.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="35.09" y="351.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::assign_username (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="485" width="30.9" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1162.09" y="495.5" >tt..</text>
</g>
<g >
<title>vma_alloc_zeroed_movable_folio (1,559,768 samples, 0.99%)</title><rect x="77.6" y="117" width="11.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="80.58" y="127.5" ></text>
</g>
<g >
<title>__libc_start_main (146,684,075 samples, 93.27%)</title><rect x="89.4" y="597" width="1100.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="92.45" y="607.5" >__libc_start_main</text>
</g>
<g >
<title>el0t_64_sync_handler (1,531,913 samples, 0.97%)</title><rect x="32.1" y="357" width="11.5" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="35.09" y="367.5" ></text>
</g>
<g >
<title>el0_svc_common.constprop.0 (162,395 samples, 0.10%)</title><rect x="30.9" y="389" width="1.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="33.87" y="399.5" ></text>
</g>
<g >
<title>__update_cpu_freelist_fast (1,261,015 samples, 0.80%)</title><rect x="287.8" y="213" width="9.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="290.76" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,745,999 samples, 1.75%)</title><rect x="372.4" y="389" width="20.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="375.37" y="399.5" ></text>
</g>
<g >
<title>server (157,270,106 samples, 100.00%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="13.02" y="639.5" >server</text>
</g>
<g >
<title>el0t_64_sync_handler (2,538,896 samples, 1.61%)</title><rect x="493.7" y="421" width="19.0" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="496.70" y="431.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;, __sanitizer::LargeMmapAllocatorPtrArrayStatic&gt;::Allocate (1,563,059 samples, 0.99%)</title><rect x="43.6" y="357" width="11.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="46.58" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (1,728,910 samples, 1.10%)</title><rect x="531.3" y="213" width="13.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="534.34" y="223.5" ></text>
</g>
<g >
<title>rmqueue (1,600,901 samples, 1.02%)</title><rect x="381.0" y="213" width="12.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="383.97" y="223.5" ></text>
</g>
<g >
<title>__asan::AsanThread::SetThreadStackAndTls (1,531,913 samples, 0.97%)</title><rect x="32.1" y="517" width="11.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="35.09" y="527.5" ></text>
</g>
<g >
<title>_dl_catch_exception (162,395 samples, 0.10%)</title><rect x="30.9" y="533" width="1.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="33.87" y="543.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (3,082,110 samples, 1.96%)</title><rect x="401.8" y="469" width="23.1" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="404.78" y="479.5" >_..</text>
</g>
<g >
<title>__asan::InitializeAsanInterceptors (4,531,718 samples, 2.88%)</title><rect x="43.6" y="565" width="34.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="46.58" y="575.5" >__..</text>
</g>
<g >
<title>do_anonymous_page (1,559,768 samples, 0.99%)</title><rect x="77.6" y="149" width="11.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="80.58" y="159.5" ></text>
</g>
<g >
<title>__arm64_sys_sendto (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="325" width="30.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1162.09" y="335.5" >__..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1,179,868 samples, 0.75%)</title><rect x="659.0" y="437" width="8.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="661.96" y="447.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,728,910 samples, 1.10%)</title><rect x="531.3" y="181" width="13.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="534.34" y="191.5" ></text>
</g>
<g >
<title>___interceptor_send.part.0 (10,809,223 samples, 6.87%)</title><rect x="825.3" y="437" width="81.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="828.30" y="447.5" >___interc..</text>
</g>
<g >
<title>el0t_64_sync_handler (21,574 samples, 0.01%)</title><rect x="89.3" y="581" width="0.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="92.29" y="591.5" ></text>
</g>
<g >
<title>vma_alloc_folio (1,720,932 samples, 1.09%)</title><rect x="467.1" y="229" width="12.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="470.05" y="239.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (1,559,768 samples, 0.99%)</title><rect x="77.6" y="85" width="11.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="80.58" y="95.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (2,017,844 samples, 1.28%)</title><rect x="853.7" y="229" width="15.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="856.70" y="239.5" ></text>
</g>
<g >
<title>[unknown] (21,574 samples, 0.01%)</title><rect x="89.3" y="613" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="92.29" y="623.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,531,718 samples, 2.88%)</title><rect x="43.6" y="437" width="34.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.58" y="447.5" >[l..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (162,395 samples, 0.10%)</title><rect x="30.9" y="501" width="1.2" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="33.87" y="511.5" ></text>
</g>
<g >
<title>do_translation_fault (1,559,768 samples, 0.99%)</title><rect x="77.6" y="245" width="11.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="80.58" y="255.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::send_message (44,488,130 samples, 28.29%)</title><rect x="825.3" y="453" width="333.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="828.30" y="463.5" >tt::chat::server::EpollServer::send_message</text>
</g>
<g >
<title>tcp_recvmsg (3,026,232 samples, 1.92%)</title><rect x="274.5" y="293" width="22.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="277.52" y="303.5" >t..</text>
</g>
<g >
<title>seq_read_iter (1,531,913 samples, 0.97%)</title><rect x="32.1" y="213" width="11.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="35.09" y="223.5" ></text>
</g>
<g >
<title>epoll_pwait (3,759,490 samples, 2.39%)</title><rect x="89.4" y="533" width="28.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="92.45" y="543.5" >e..</text>
</g>
<g >
<title>invoke_syscall (1,531,913 samples, 0.97%)</title><rect x="32.1" y="293" width="11.5" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="35.09" y="303.5" ></text>
</g>
<g >
<title>main (146,684,075 samples, 93.27%)</title><rect x="89.4" y="565" width="1100.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="92.45" y="575.5" >main</text>
</g>
<g >
<title>__alloc_pages (1,559,768 samples, 0.99%)</title><rect x="77.6" y="69" width="11.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="80.58" y="79.5" ></text>
</g>
<g >
<title>__sanitizer::InternalAlloc (4,531,718 samples, 2.88%)</title><rect x="43.6" y="373" width="34.0" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="46.58" y="383.5" >__..</text>
</g>
<g >
<title>do_el0_svc (162,395 samples, 0.10%)</title><rect x="30.9" y="405" width="1.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="33.87" y="415.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32LocalCache&lt;__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt; &gt;::Refill (1,559,768 samples, 0.99%)</title><rect x="77.6" y="373" width="11.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="80.58" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (1,983,470 samples, 1.26%)</title><rect x="117.7" y="325" width="14.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="120.66" y="335.5" ></text>
</g>
<g >
<title>inet_recvmsg (3,026,232 samples, 1.92%)</title><rect x="274.5" y="309" width="22.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="277.52" y="319.5" >i..</text>
</g>
<g >
<title>seq_read (1,531,913 samples, 0.97%)</title><rect x="32.1" y="229" width="11.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="35.09" y="239.5" ></text>
</g>
<g >
<title>__sanitizer::ListOfModules::init (1,559,768 samples, 0.99%)</title><rect x="77.6" y="549" width="11.7" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="80.58" y="559.5" ></text>
</g>
<g >
<title>__lsan::InitializePlatformSpecificModules (1,559,768 samples, 0.99%)</title><rect x="77.6" y="565" width="11.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="80.58" y="575.5" ></text>
</g>
<g >
<title>tcp_push (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="229" width="30.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1162.09" y="239.5" >tc..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator32&lt;__sanitizer::AP32&gt;::PopulateFreeList (1,559,768 samples, 0.99%)</title><rect x="77.6" y="341" width="11.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="80.58" y="351.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindImpl (1,670,103 samples, 1.06%)</title><rect x="667.8" y="405" width="12.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="670.81" y="415.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (1,600,901 samples, 1.02%)</title><rect x="381.0" y="261" width="12.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="383.97" y="271.5" ></text>
</g>
<g >
<title>__sanitizer::GetThreadStackTopAndBottom (1,531,913 samples, 0.97%)</title><rect x="32.1" y="485" width="11.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="35.09" y="495.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (2,104,009 samples, 1.34%)</title><rect x="297.2" y="309" width="15.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="300.22" y="319.5" ></text>
</g>
<g >
<title>el0_da (2,538,896 samples, 1.61%)</title><rect x="493.7" y="405" width="19.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="496.70" y="415.5" ></text>
</g>
<g >
<title>do_page_fault (3,001,623 samples, 1.91%)</title><rect x="457.4" y="357" width="22.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="460.44" y="367.5" >d..</text>
</g>
<g >
<title>el0_svc (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="389" width="30.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1162.09" y="399.5" >el..</text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (1,728,910 samples, 1.10%)</title><rect x="531.3" y="373" width="13.0" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="534.34" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (1,179,868 samples, 0.75%)</title><rect x="659.0" y="421" width="8.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="661.96" y="431.5" ></text>
</g>
<g >
<title>all (157,273,269 samples, 100%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>__arm64_sys_read (8,885,900 samples, 5.65%)</title><rect x="246.3" y="389" width="66.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="249.34" y="399.5" >__arm64..</text>
</g>
<g >
<title>vma_alloc_zeroed_movable_folio (1,720,932 samples, 1.09%)</title><rect x="467.1" y="245" width="12.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="470.05" y="255.5" ></text>
</g>
<g >
<title>vma_complete (21,574 samples, 0.01%)</title><rect x="89.3" y="341" width="0.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="92.29" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (8,804,709 samples, 5.60%)</title><rect x="555.8" y="485" width="66.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="558.83" y="495.5" >std::__..</text>
</g>
<g >
<title>invoke_syscall (162,395 samples, 0.10%)</title><rect x="30.9" y="373" width="1.2" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="33.87" y="383.5" ></text>
</g>
<g >
<title>spdlog::default_logger_raw (1,983,470 samples, 1.26%)</title><rect x="117.7" y="533" width="14.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="120.66" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3,026,681 samples, 1.92%)</title><rect x="740.0" y="437" width="22.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="742.97" y="447.5" >s..</text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindImpl (1,670,103 samples, 1.06%)</title><rect x="667.8" y="389" width="12.5" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="670.81" y="399.5" ></text>
</g>
<g >
<title>do_el0_svc (3,759,490 samples, 2.39%)</title><rect x="89.4" y="469" width="28.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="92.45" y="479.5" >d..</text>
</g>
<g >
<title>schedule_hrtimeout_range (1,270,952 samples, 0.81%)</title><rect x="99.2" y="357" width="9.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="102.23" y="367.5" ></text>
</g>
<g >
<title>__interception::InterceptFunction (4,531,718 samples, 2.88%)</title><rect x="43.6" y="533" width="34.0" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="46.58" y="543.5" >__..</text>
</g>
<g >
<title>void fmt::v9::detail::vformat_to&lt;char&gt; (1,535,771 samples, 0.98%)</title><rect x="544.3" y="469" width="11.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="547.31" y="479.5" ></text>
</g>
<g >
<title>el0_da (1,983,470 samples, 1.26%)</title><rect x="117.7" y="389" width="14.8" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="120.66" y="399.5" ></text>
</g>
<g >
<title>spdlog::details::registry::registry (1,983,470 samples, 1.26%)</title><rect x="117.7" y="501" width="14.8" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="120.66" y="511.5" ></text>
</g>
<g >
<title>__sanitizer::MemoryMappingLayout::MemoryMappingLayout (1,531,913 samples, 0.97%)</title><rect x="32.1" y="469" width="11.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="35.09" y="479.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (3,369,589 samples, 2.14%)</title><rect x="782.6" y="421" width="25.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="785.56" y="431.5" >_..</text>
</g>
<g >
<title>handle_pte_fault (1,720,932 samples, 1.09%)</title><rect x="467.1" y="309" width="12.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="470.05" y="319.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,559,768 samples, 0.99%)</title><rect x="77.6" y="197" width="11.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="80.58" y="207.5" ></text>
</g>
<g >
<title>__sanitizer::AddModuleSegments (1,559,768 samples, 0.99%)</title><rect x="77.6" y="501" width="11.7" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="80.58" y="511.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (3,027,425 samples, 1.92%)</title><rect x="521.6" y="389" width="22.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="524.60" y="399.5" >_..</text>
</g>
<g >
<title>apparmor_file_permission (1,882,247 samples, 1.20%)</title><rect x="246.3" y="325" width="14.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="249.34" y="335.5" ></text>
</g>
<g >
<title>el0t_64_sync_handler (2,745,999 samples, 1.75%)</title><rect x="372.4" y="469" width="20.6" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="375.37" y="479.5" ></text>
</g>
<g >
<title>__sys_sendto (7,608,546 samples, 4.84%)</title><rect x="833.9" y="293" width="57.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="836.90" y="303.5" >__sys_..</text>
</g>
<g >
<title>[libc.so.6] (4,531,718 samples, 2.88%)</title><rect x="43.6" y="453" width="34.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="46.58" y="463.5" >[l..</text>
</g>
<g >
<title>show_map_vma (1,531,913 samples, 0.97%)</title><rect x="32.1" y="181" width="11.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="35.09" y="191.5" ></text>
</g>
<g >
<title>apparmor_socket_recvmsg (2,104,009 samples, 1.34%)</title><rect x="297.2" y="293" width="15.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="300.22" y="303.5" ></text>
</g>
<g >
<title>__asan::AsanThread::Init (1,531,913 samples, 0.97%)</title><rect x="32.1" y="533" width="11.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="35.09" y="543.5" ></text>
</g>
<g >
<title>__sanitizer::ReadProcMaps (1,531,913 samples, 0.97%)</title><rect x="32.1" y="437" width="11.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="35.09" y="447.5" ></text>
</g>
<g >
<title>___interceptor_strlen.part.0 (1,983,470 samples, 1.26%)</title><rect x="117.7" y="453" width="14.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="120.66" y="463.5" ></text>
</g>
<g >
<title>__sock_sendmsg (7,608,546 samples, 4.84%)</title><rect x="833.9" y="277" width="57.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="836.90" y="287.5" >__sock..</text>
</g>
<g >
<title>__arch_copy_from_user (2,017,844 samples, 1.28%)</title><rect x="853.7" y="197" width="15.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="856.70" y="207.5" ></text>
</g>
<g >
<title>alloc_anon_folio (1,559,768 samples, 0.99%)</title><rect x="77.6" y="133" width="11.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="80.58" y="143.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1,983,470 samples, 1.26%)</title><rect x="117.7" y="309" width="14.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="120.66" y="319.5" ></text>
</g>
<g >
<title>_dl_catch_exception (4,531,718 samples, 2.88%)</title><rect x="43.6" y="469" width="34.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="46.58" y="479.5" >_d..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (2,941,058 samples, 1.87%)</title><rect x="10.0" y="581" width="22.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.02" y="591.5" >[..</text>
</g>
<g >
<title>__pmd_alloc (1,728,910 samples, 1.10%)</title><rect x="531.3" y="165" width="13.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="534.34" y="175.5" ></text>
</g>
<g >
<title>alloc_anon_folio (1,720,932 samples, 1.09%)</title><rect x="467.1" y="261" width="12.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="470.05" y="271.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (1,298,515 samples, 0.83%)</title><rect x="521.6" y="373" width="9.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="524.60" y="383.5" ></text>
</g>
<g >
<title>do_el0_svc (10,809,223 samples, 6.87%)</title><rect x="825.3" y="357" width="81.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="828.30" y="367.5" >do_el0_svc</text>
</g>
<g >
<title>el0t_64_sync (1,531,913 samples, 0.97%)</title><rect x="32.1" y="373" width="11.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="35.09" y="383.5" ></text>
</g>
<g >
<title>dlsym (4,531,718 samples, 2.88%)</title><rect x="43.6" y="517" width="34.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="46.58" y="527.5" >dl..</text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (1,308,578 samples, 0.83%)</title><rect x="424.9" y="453" width="9.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="427.91" y="463.5" ></text>
</g>
<g >
<title>el0t_64_sync_handler (10,809,223 samples, 6.87%)</title><rect x="825.3" y="389" width="81.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="828.30" y="399.5" >el0t_64_s..</text>
</g>
<g >
<title>__sock_sendmsg (4,119,422 samples, 2.62%)</title><rect x="1159.1" y="293" width="30.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1162.09" y="303.5" >__..</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (10,819,877 samples, 6.88%)</title><rect x="246.3" y="421" width="81.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="249.34" y="431.5" >el0_svc_c..</text>
</g>
<g >
<title>vma_alloc_zeroed_movable_folio (1,267,944 samples, 0.81%)</title><rect x="503.2" y="245" width="9.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="506.23" y="255.5" ></text>
</g>
<g >
<title>fmt::v9::format_arg_store&lt;fmt::v9::basic_format_context&lt;fmt::v9::appender, char&gt;, std::remove_cv&lt;std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::type, std::remove_cv&lt;std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::type, std::remove_cv&lt;std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::type&gt; fmt::v9::make_format_args&lt;fmt::v9::basic_format_context&lt;fmt::v9::appender, char&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (5,549,260 samples, 3.53%)</title><rect x="480.0" y="485" width="41.6" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="482.96" y="495.5" >fmt..</text>
</g>
<g >
<title>do_pte_missing (1,983,470 samples, 1.26%)</title><rect x="117.7" y="277" width="14.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="120.66" y="287.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (2,911,531 samples, 1.85%)</title><rect x="588.4" y="453" width="21.8" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="591.37" y="463.5" >_..</text>
</g>
<g >
<title>vma_alloc_folio (1,559,768 samples, 0.99%)</title><rect x="77.6" y="101" width="11.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="80.58" y="111.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::operator[] (4,449,610 samples, 2.83%)</title><rect x="782.6" y="453" width="33.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="785.56" y="463.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (3,027,425 samples, 1.92%)</title><rect x="521.6" y="453" width="22.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="524.60" y="463.5" >s..</text>
</g>
<g >
<title>aa_inet_msg_perm (2,950,794 samples, 1.88%)</title><rect x="868.8" y="229" width="22.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="871.84" y="239.5" >a..</text>
</g>
<g >
<title>__asan_stack_malloc_3 (2,538,896 samples, 1.61%)</title><rect x="493.7" y="453" width="19.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="496.70" y="463.5" ></text>
</g>
<g >
<title>operator new (1,308,578 samples, 0.83%)</title><rect x="424.9" y="437" width="9.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="427.91" y="447.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (1,308,578 samples, 0.83%)</title><rect x="424.9" y="405" width="9.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="427.91" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (1,308,578 samples, 0.83%)</title><rect x="424.9" y="469" width="9.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="427.91" y="479.5" ></text>
</g>
</g>
</svg>
