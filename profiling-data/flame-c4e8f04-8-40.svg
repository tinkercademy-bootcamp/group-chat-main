<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="694.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="677" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="677" > </text>
<g id="frames">
<g >
<title>inet_recvmsg (3,927,161 samples, 4.97%)</title><rect x="500.9" y="309" width="58.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="503.92" y="319.5" >inet_r..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::run (67,941,973 samples, 86.01%)</title><rect x="175.0" y="549" width="1015.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="178.04" y="559.5" >tt::chat::server::EpollServer::run</text>
</g>
<g >
<title>[libc.so.6] (1,863,986 samples, 2.36%)</title><rect x="767.5" y="453" width="27.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="770.47" y="463.5" >[..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::handle_client_data (54,024,516 samples, 68.39%)</title><rect x="383.0" y="533" width="807.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="385.95" y="543.5" >tt::chat::server::EpollServer::handle_client_data</text>
</g>
<g >
<title>do_el0_svc (3,628,708 samples, 4.59%)</title><rect x="989.1" y="357" width="54.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="992.13" y="367.5" >do_el..</text>
</g>
<g >
<title>el0t_64_sync_handler (160,256 samples, 0.20%)</title><rect x="49.5" y="437" width="2.4" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="52.48" y="447.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_3 (1,845,515 samples, 2.34%)</title><rect x="826.4" y="469" width="27.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="829.42" y="479.5" >_..</text>
</g>
<g >
<title>el0t_64_sync (1,845,515 samples, 2.34%)</title><rect x="826.4" y="437" width="27.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="829.42" y="447.5" >e..</text>
</g>
<g >
<title>main (67,941,973 samples, 86.01%)</title><rect x="175.0" y="565" width="1015.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="178.04" y="575.5" >main</text>
</g>
<g >
<title>__asan_region_is_poisoned (1,648,869 samples, 2.09%)</title><rect x="936.8" y="405" width="24.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="939.83" y="415.5" >_..</text>
</g>
<g >
<title>__handle_mm_fault (2,041,512 samples, 2.58%)</title><rect x="352.5" y="133" width="30.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="355.45" y="143.5" >__..</text>
</g>
<g >
<title>handle_pte_fault (2,041,512 samples, 2.58%)</title><rect x="352.5" y="117" width="30.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="355.45" y="127.5" >ha..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::handle_name_command (2,128,354 samples, 2.69%)</title><rect x="1158.2" y="501" width="31.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1161.21" y="511.5" >tt..</text>
</g>
<g >
<title>server (78,987,009 samples, 100.00%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="13.05" y="639.5" >server</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2,025,471 samples, 2.56%)</title><rect x="1127.9" y="437" width="30.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1130.95" y="447.5" >st..</text>
</g>
<g >
<title>get_random_u16 (1,979,839 samples, 2.51%)</title><rect x="1013.8" y="309" width="29.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1016.76" y="319.5" >ge..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (1,724,057 samples, 2.18%)</title><rect x="854.0" y="485" width="25.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="856.99" y="495.5" >s..</text>
</g>
<g >
<title>exec_binprm (21,151 samples, 0.03%)</title><rect x="174.7" y="437" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="177.73" y="447.5" ></text>
</g>
<g >
<title>security_socket_recvmsg (4,074,670 samples, 5.16%)</title><rect x="559.6" y="309" width="60.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="562.58" y="319.5" >securi..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (160,256 samples, 0.20%)</title><rect x="49.5" y="517" width="2.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="52.48" y="527.5" ></text>
</g>
<g >
<title>spdlog::default_logger_raw (2,041,512 samples, 2.58%)</title><rect x="352.5" y="533" width="30.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="355.45" y="543.5" >sp..</text>
</g>
<g >
<title>std::__shared_ptr&lt;spdlog::logger,  (2,128,354 samples, 2.69%)</title><rect x="1158.2" y="437" width="31.8" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1161.21" y="447.5" >st..</text>
</g>
<g >
<title>el0_svc (21,151 samples, 0.03%)</title><rect x="174.7" y="565" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="177.73" y="575.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,041,512 samples, 2.58%)</title><rect x="352.5" y="261" width="30.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="355.45" y="271.5" >[l..</text>
</g>
<g >
<title>__asan::AsanThread::ThreadStart (1,816,270 samples, 2.30%)</title><rect x="51.9" y="549" width="27.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="54.87" y="559.5" >_..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,969,431 samples, 2.49%)</title><rect x="879.7" y="437" width="29.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="882.75" y="447.5" >st..</text>
</g>
<g >
<title>__check_object_size.part.0 (1,648,869 samples, 2.09%)</title><rect x="989.1" y="181" width="24.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="992.13" y="191.5" >_..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::PopulateFreeArray (2,041,512 samples, 2.58%)</title><rect x="352.5" y="277" width="30.5" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="355.45" y="287.5" >__..</text>
</g>
<g >
<title>el0t_64_sync (11,875,945 samples, 15.03%)</title><rect x="175.0" y="517" width="177.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="178.04" y="527.5" >el0t_64_sync</text>
</g>
<g >
<title>el0t_64_sync_handler (15,898,623 samples, 20.13%)</title><rect x="383.0" y="469" width="237.5" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="385.95" y="479.5" >el0t_64_sync_handler</text>
</g>
<g >
<title>is_vmalloc_addr (1,648,869 samples, 2.09%)</title><rect x="989.1" y="165" width="24.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="992.13" y="175.5" >i..</text>
</g>
<g >
<title>___interceptor_memcmp (1,923,005 samples, 2.43%)</title><rect x="738.7" y="453" width="28.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="741.75" y="463.5" >__..</text>
</g>
<g >
<title>spdlog::details::registry::get_default_raw (2,128,354 samples, 2.69%)</title><rect x="1158.2" y="453" width="31.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1161.21" y="463.5" >sp..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (2,041,512 samples, 2.58%)</title><rect x="352.5" y="389" width="30.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="355.45" y="399.5" >st..</text>
</g>
<g >
<title>filemap_map_pages (1,053,639 samples, 1.33%)</title><rect x="33.7" y="341" width="15.8" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="36.74" y="351.5" ></text>
</g>
<g >
<title>mas_store_prealloc (21,151 samples, 0.03%)</title><rect x="174.7" y="357" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="177.73" y="367.5" ></text>
</g>
<g >
<title>tcp_recvmsg (3,927,161 samples, 4.97%)</title><rect x="500.9" y="293" width="58.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="503.92" y="303.5" >tcp_re..</text>
</g>
<g >
<title>tcp_poll (4,017,273 samples, 5.09%)</title><rect x="263.3" y="309" width="60.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="266.32" y="319.5" >tcp_poll</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (3,946,156 samples, 5.00%)</title><rect x="767.5" y="485" width="58.9" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="770.47" y="495.5" >std::c..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,724,057 samples, 2.18%)</title><rect x="854.0" y="469" width="25.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="856.99" y="479.5" >s..</text>
</g>
<g >
<title>all (78,990,108 samples, 100%)</title><rect x="10.0" y="645" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned@plt (1,851,756 samples, 2.34%)</title><rect x="961.5" y="421" width="27.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="964.46" y="431.5" >_..</text>
</g>
<g >
<title>[libc.so.6] (3,070,882 samples, 3.89%)</title><rect x="79.0" y="453" width="45.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="82.01" y="463.5" >[lib..</text>
</g>
<g >
<title>do_page_fault (2,041,512 samples, 2.58%)</title><rect x="352.5" y="165" width="30.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="355.45" y="175.5" >do..</text>
</g>
<g >
<title>__sock_sendmsg (1,648,869 samples, 2.09%)</title><rect x="989.1" y="277" width="24.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="992.13" y="287.5" >_..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::send_message (14,645,230 samples, 18.54%)</title><rect x="909.2" y="469" width="218.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="912.17" y="479.5" >tt::chat::server::EpollServe..</text>
</g>
<g >
<title>el0t_64_sync (15,898,623 samples, 20.13%)</title><rect x="383.0" y="485" width="237.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="385.95" y="495.5" >el0t_64_sync</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1,851,756 samples, 2.34%)</title><rect x="711.1" y="517" width="27.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="714.08" y="527.5" >s..</text>
</g>
<g >
<title>spdlog::details::registry::registry (2,041,512 samples, 2.58%)</title><rect x="352.5" y="501" width="30.5" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="355.45" y="511.5" >sp..</text>
</g>
<g >
<title>apparmor_socket_recvmsg (4,074,670 samples, 5.16%)</title><rect x="559.6" y="293" width="60.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="562.58" y="303.5" >apparm..</text>
</g>
<g >
<title>__asan::AsanThread::Init (1,816,270 samples, 2.30%)</title><rect x="51.9" y="533" width="27.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="54.87" y="543.5" >_..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (1,525,278 samples, 1.93%)</title><rect x="79.0" y="389" width="22.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="82.01" y="399.5" >[..</text>
</g>
<g >
<title>__sanitizer::internal_memcmp (1,406,774 samples, 1.78%)</title><rect x="124.9" y="517" width="21.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="127.88" y="527.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (5,664,141 samples, 7.17%)</title><rect x="1043.3" y="437" width="84.6" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1046.33" y="447.5" >__asan_st..</text>
</g>
<g >
<title>do_epoll_wait (11,875,945 samples, 15.03%)</title><rect x="175.0" y="389" width="177.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="178.04" y="399.5" >do_epoll_wait</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (1,525,278 samples, 1.93%)</title><rect x="79.0" y="405" width="22.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="82.01" y="415.5" >[..</text>
</g>
<g >
<title>do_el0_svc (1,816,270 samples, 2.30%)</title><rect x="51.9" y="341" width="27.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="54.87" y="351.5" >d..</text>
</g>
<g >
<title>vma_alloc_zeroed_movable_folio (2,041,512 samples, 2.58%)</title><rect x="352.5" y="53" width="30.5" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="355.45" y="63.5" >vm..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (2,041,512 samples, 2.58%)</title><rect x="352.5" y="437" width="30.5" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="355.45" y="447.5" >st..</text>
</g>
<g >
<title>rw_verify_area (1,881,814 samples, 2.38%)</title><rect x="472.8" y="341" width="28.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="475.81" y="351.5" >r..</text>
</g>
<g >
<title>handle_mm_fault (1,053,639 samples, 1.33%)</title><rect x="33.7" y="421" width="15.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="36.74" y="431.5" ></text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (2,639,725 samples, 3.34%)</title><rect x="10.0" y="533" width="39.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.05" y="543.5" >[ld..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::handle_channel_message (20,184,233 samples, 25.55%)</title><rect x="826.4" y="501" width="301.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="829.42" y="511.5" >tt::chat::server::EpollServer::handle_ch..</text>
</g>
<g >
<title>ep_poll (7,892,298 samples, 9.99%)</title><rect x="234.6" y="373" width="117.9" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="237.55" y="383.5" >ep_poll</text>
</g>
<g >
<title>[libc.so.6] (3,070,882 samples, 3.89%)</title><rect x="79.0" y="501" width="45.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="82.01" y="511.5" >[lib..</text>
</g>
<g >
<title>load_elf_binary (21,151 samples, 0.03%)</title><rect x="174.7" y="405" width="0.3" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="177.73" y="415.5" ></text>
</g>
<g >
<title>ep_send_events (5,942,868 samples, 7.52%)</title><rect x="234.6" y="357" width="88.7" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="237.55" y="367.5" >ep_send_ev..</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,851,756 samples, 2.34%)</title><rect x="711.1" y="501" width="27.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="714.08" y="511.5" >v..</text>
</g>
<g >
<title>el0_da (1,053,639 samples, 1.33%)</title><rect x="33.7" y="485" width="15.8" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="36.74" y="495.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::broadcast_to_channel (14,645,230 samples, 18.54%)</title><rect x="909.2" y="485" width="218.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="912.17" y="495.5" >tt::chat::server::EpollServe..</text>
</g>
<g >
<title>InitializeCommonInterceptors (3,070,882 samples, 3.89%)</title><rect x="79.0" y="549" width="45.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="82.01" y="559.5" >Init..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (748,907 samples, 0.95%)</title><rect x="22.6" y="517" width="11.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="25.55" y="527.5" ></text>
</g>
<g >
<title>el0_da (2,041,512 samples, 2.58%)</title><rect x="352.5" y="213" width="30.5" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="355.45" y="223.5" >el..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::send_message (14,645,230 samples, 18.54%)</title><rect x="909.2" y="453" width="218.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="912.17" y="463.5" >tt::chat::server::EpollServe..</text>
</g>
<g >
<title>alloc_anon_folio (2,041,512 samples, 2.58%)</title><rect x="352.5" y="69" width="30.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="355.45" y="79.5" >al..</text>
</g>
<g >
<title>el0_svc (11,875,945 samples, 15.03%)</title><rect x="175.0" y="485" width="177.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="178.04" y="495.5" >el0_svc</text>
</g>
<g >
<title>do_el0_svc (21,151 samples, 0.03%)</title><rect x="174.7" y="549" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="177.73" y="559.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (1,648,869 samples, 2.09%)</title><rect x="989.1" y="229" width="24.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="992.13" y="239.5" >t..</text>
</g>
<g >
<title>__asan_stack_free_5 (6,066,918 samples, 7.68%)</title><rect x="620.5" y="517" width="90.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="623.45" y="527.5" >__asan_sta..</text>
</g>
<g >
<title>[libc.so.6] (3,070,882 samples, 3.89%)</title><rect x="79.0" y="437" width="45.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="82.01" y="447.5" >[lib..</text>
</g>
<g >
<title>do_page_fault (1,053,639 samples, 1.33%)</title><rect x="33.7" y="437" width="15.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="36.74" y="447.5" ></text>
</g>
<g >
<title>__sys_sendto (1,648,869 samples, 2.09%)</title><rect x="989.1" y="293" width="24.7" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="992.13" y="303.5" >_..</text>
</g>
<g >
<title>lock_sock_nested (1,915,453 samples, 2.42%)</title><rect x="500.9" y="277" width="28.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="503.92" y="287.5" >lo..</text>
</g>
<g >
<title>__sanitizer::internal_read (1,816,270 samples, 2.30%)</title><rect x="51.9" y="405" width="27.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="54.87" y="415.5" >_..</text>
</g>
<g >
<title>___interceptor_send.part.0 (3,500,625 samples, 4.43%)</title><rect x="909.2" y="421" width="52.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="912.17" y="431.5" >___in..</text>
</g>
<g >
<title>do_anonymous_page (2,041,512 samples, 2.58%)</title><rect x="352.5" y="85" width="30.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="355.45" y="95.5" >do..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64LocalCache&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt; &gt;::Refill (2,041,512 samples, 2.58%)</title><rect x="352.5" y="309" width="30.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="355.45" y="319.5" >__..</text>
</g>
<g >
<title>seq_read_iter (1,816,270 samples, 2.30%)</title><rect x="51.9" y="229" width="27.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="54.87" y="239.5" >s..</text>
</g>
<g >
<title>___interceptor_malloc (1,545,604 samples, 1.96%)</title><rect x="101.8" y="389" width="23.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="104.79" y="399.5" >_..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::parse_client_command (30,207,219 samples, 38.24%)</title><rect x="738.7" y="517" width="451.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="741.75" y="527.5" >tt::chat::server::EpollServer::parse_client_command</text>
</g>
<g >
<title>shift_arg_pages (21,151 samples, 0.03%)</title><rect x="174.7" y="373" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="177.73" y="383.5" ></text>
</g>
<g >
<title>__sanitizer::GetThreadStackTopAndBottom (1,816,270 samples, 2.30%)</title><rect x="51.9" y="485" width="27.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="54.87" y="495.5" >_..</text>
</g>
<g >
<title>invoke_syscall (11,827,320 samples, 14.97%)</title><rect x="443.8" y="405" width="176.7" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="446.77" y="415.5" >invoke_syscall</text>
</g>
<g >
<title>__asan_stack_malloc_3 (1,845,515 samples, 2.34%)</title><rect x="826.4" y="453" width="27.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="829.42" y="463.5" >_..</text>
</g>
<g >
<title>el0_svc (160,256 samples, 0.20%)</title><rect x="49.5" y="421" width="2.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="52.48" y="431.5" ></text>
</g>
<g >
<title>__asan_stack_malloc_2 (1,724,057 samples, 2.18%)</title><rect x="854.0" y="437" width="25.7" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="856.99" y="447.5" >_..</text>
</g>
<g >
<title>seq_put_hex_ll (1,816,270 samples, 2.30%)</title><rect x="51.9" y="165" width="27.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="54.87" y="175.5" >s..</text>
</g>
<g >
<title>__fdget (3,983,647 samples, 5.04%)</title><rect x="175.0" y="373" width="59.6" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="178.04" y="383.5" >__fdget</text>
</g>
<g >
<title>sock_read_iter (8,001,831 samples, 10.13%)</title><rect x="500.9" y="341" width="119.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="503.92" y="351.5" >sock_read_iter</text>
</g>
<g >
<title>do_mem_abort (1,053,639 samples, 1.33%)</title><rect x="33.7" y="469" width="15.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="36.74" y="479.5" ></text>
</g>
<g >
<title>security_file_permission (1,881,814 samples, 2.38%)</title><rect x="472.8" y="325" width="28.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="475.81" y="335.5" >s..</text>
</g>
<g >
<title>__fget_light (3,983,647 samples, 5.04%)</title><rect x="175.0" y="357" width="59.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="178.04" y="367.5" >__fget..</text>
</g>
<g >
<title>__libc_start_main (67,941,973 samples, 86.01%)</title><rect x="175.0" y="597" width="1015.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="178.04" y="607.5" >__libc_start_main</text>
</g>
<g >
<title>__asan::InitializeSuppressions (1,929,978 samples, 2.44%)</title><rect x="145.9" y="565" width="28.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="148.90" y="575.5" >__..</text>
</g>
<g >
<title>release_sock (2,011,708 samples, 2.55%)</title><rect x="529.5" y="277" width="30.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="532.53" y="287.5" >re..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (160,256 samples, 0.20%)</title><rect x="49.5" y="501" width="2.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="52.48" y="511.5" ></text>
</g>
<g >
<title>el0_svc_common.constprop.0 (3,628,708 samples, 4.59%)</title><rect x="989.1" y="341" width="54.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="992.13" y="351.5" >el0_s..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (1,923,005 samples, 2.43%)</title><rect x="738.7" y="469" width="28.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="741.75" y="479.5" >st..</text>
</g>
<g >
<title>spdlog::default_logger_raw (2,128,354 samples, 2.69%)</title><rect x="1158.2" y="469" width="31.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1161.21" y="479.5" >sp..</text>
</g>
<g >
<title>do_translation_fault (2,041,512 samples, 2.58%)</title><rect x="352.5" y="181" width="30.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="355.45" y="191.5" >do..</text>
</g>
<g >
<title>__sanitizer::internal_allocator (1,545,604 samples, 1.96%)</title><rect x="101.8" y="357" width="23.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="104.79" y="367.5" >_..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,969,431 samples, 2.49%)</title><rect x="879.7" y="453" width="29.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="882.75" y="463.5" >st..</text>
</g>
<g >
<title>el0_da (1,845,515 samples, 2.34%)</title><rect x="826.4" y="405" width="27.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="829.42" y="415.5" >e..</text>
</g>
<g >
<title>el0t_64_sync_handler (1,816,270 samples, 2.30%)</title><rect x="51.9" y="373" width="27.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="54.87" y="383.5" >e..</text>
</g>
<g >
<title>__asan::InitializeFlags (1,406,774 samples, 1.78%)</title><rect x="124.9" y="565" width="21.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="127.88" y="575.5" ></text>
</g>
<g >
<title>ksys_read (9,883,645 samples, 12.51%)</title><rect x="472.8" y="373" width="147.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="475.81" y="383.5" >ksys_read</text>
</g>
<g >
<title>invoke_syscall (1,816,270 samples, 2.30%)</title><rect x="51.9" y="309" width="27.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="54.87" y="319.5" >i..</text>
</g>
<g >
<title>el0t_64_sync (2,041,512 samples, 2.58%)</title><rect x="352.5" y="245" width="30.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="355.45" y="255.5" >el..</text>
</g>
<g >
<title>__sanitizer::FlagParser::ParseStringFromEnv (1,406,774 samples, 1.78%)</title><rect x="124.9" y="549" width="21.0" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="127.88" y="559.5" ></text>
</g>
<g >
<title>__asan_default_suppressions@plt (1,929,978 samples, 2.44%)</title><rect x="145.9" y="549" width="28.8" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="148.90" y="559.5" >__..</text>
</g>
<g >
<title>[libc.so.6] (67,941,973 samples, 86.01%)</title><rect x="175.0" y="581" width="1015.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="178.04" y="591.5" >[libc.so.6]</text>
</g>
<g >
<title>__arm64_sys_execve (21,151 samples, 0.03%)</title><rect x="174.7" y="501" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="177.73" y="511.5" ></text>
</g>
<g >
<title>invoke_syscall (11,875,945 samples, 15.03%)</title><rect x="175.0" y="437" width="177.5" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="178.04" y="447.5" >invoke_syscall</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (160,256 samples, 0.20%)</title><rect x="49.5" y="469" width="2.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="52.48" y="479.5" ></text>
</g>
<g >
<title>tt::chat::server::EpollServer::handle_join_command (2,025,471 samples, 2.56%)</title><rect x="1127.9" y="501" width="30.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1130.95" y="511.5" >tt..</text>
</g>
<g >
<title>__asan::InitializeAsanInterceptors (3,070,882 samples, 3.89%)</title><rect x="79.0" y="565" width="45.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="82.01" y="575.5" >__as..</text>
</g>
<g >
<title>search_binary_handler (21,151 samples, 0.03%)</title><rect x="174.7" y="421" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="177.73" y="431.5" ></text>
</g>
<g >
<title>__arm64_sys_read (11,827,320 samples, 14.97%)</title><rect x="443.8" y="389" width="176.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="446.77" y="399.5" >__arm64_sys_read</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (21,151 samples, 0.03%)</title><rect x="174.7" y="533" width="0.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="177.73" y="543.5" ></text>
</g>
<g >
<title>mutex_unlock (1,949,430 samples, 2.47%)</title><rect x="323.3" y="357" width="29.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="326.33" y="367.5" >mu..</text>
</g>
<g >
<title>ep_item_poll.isra.0 (5,942,868 samples, 7.52%)</title><rect x="234.6" y="341" width="88.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="237.55" y="351.5" >ep_item_po..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (2,041,512 samples, 2.58%)</title><rect x="352.5" y="469" width="30.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="355.45" y="479.5" >st..</text>
</g>
<g >
<title>do_el0_svc (11,875,945 samples, 15.03%)</title><rect x="175.0" y="469" width="177.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="178.04" y="479.5" >do_el0_svc</text>
</g>
<g >
<title>get_vma_policy (2,041,512 samples, 2.58%)</title><rect x="352.5" y="37" width="30.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="355.45" y="47.5" >ge..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,025,471 samples, 2.56%)</title><rect x="1127.9" y="453" width="30.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1130.95" y="463.5" >st..</text>
</g>
<g >
<title>show_map_vma (1,816,270 samples, 2.30%)</title><rect x="51.9" y="197" width="27.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="54.87" y="207.5" >s..</text>
</g>
<g >
<title>___interceptor_strlen.part.0 (1,863,986 samples, 2.36%)</title><rect x="767.5" y="469" width="27.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="770.47" y="479.5" >_..</text>
</g>
<g >
<title>el0t_64_sync (3,628,708 samples, 4.59%)</title><rect x="989.1" y="405" width="54.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="992.13" y="415.5" >el0t_..</text>
</g>
<g >
<title>el0t_64_sync (1,816,270 samples, 2.30%)</title><rect x="51.9" y="389" width="27.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="54.87" y="399.5" >e..</text>
</g>
<g >
<title>_dl_exception_create_format (1,545,604 samples, 1.96%)</title><rect x="101.8" y="405" width="23.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="104.79" y="415.5" >_..</text>
</g>
<g >
<title>show_map (1,816,270 samples, 2.30%)</title><rect x="51.9" y="213" width="27.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="54.87" y="223.5" >s..</text>
</g>
<g >
<title>el0t_64_sync_handler (2,041,512 samples, 2.58%)</title><rect x="352.5" y="229" width="30.5" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="355.45" y="239.5" >el..</text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::GetFromAllocator (2,041,512 samples, 2.58%)</title><rect x="352.5" y="293" width="30.5" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="355.45" y="303.5" >__..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (3,070,882 samples, 3.89%)</title><rect x="79.0" y="421" width="45.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="82.01" y="431.5" >[ld-..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_buckets (2,041,512 samples, 2.58%)</title><rect x="352.5" y="405" width="30.5" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="355.45" y="415.5" >st..</text>
</g>
<g >
<title>el0t_64_sync_handler (21,151 samples, 0.03%)</title><rect x="174.7" y="581" width="0.3" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="177.73" y="591.5" ></text>
</g>
<g >
<title>__sanitizer_weak_hook_memcmp (1,923,005 samples, 2.43%)</title><rect x="738.7" y="421" width="28.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="741.75" y="431.5" >__..</text>
</g>
<g >
<title>strlen@plt (2,082,170 samples, 2.64%)</title><rect x="795.3" y="469" width="31.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="798.32" y="479.5" >st..</text>
</g>
<g >
<title>handle_mm_fault (2,041,512 samples, 2.58%)</title><rect x="352.5" y="149" width="30.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="355.45" y="159.5" >ha..</text>
</g>
<g >
<title>std::unordered_map&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::find (2,025,471 samples, 2.56%)</title><rect x="1127.9" y="485" width="30.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1130.95" y="495.5" >st..</text>
</g>
<g >
<title>__sanitizer::ReadFileToBuffer (1,816,270 samples, 2.30%)</title><rect x="51.9" y="437" width="27.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="54.87" y="447.5" >_..</text>
</g>
<g >
<title>__asan::AsanInitInternal (8,223,904 samples, 10.41%)</title><rect x="51.9" y="581" width="122.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="54.87" y="591.5" >__asan::AsanIni..</text>
</g>
<g >
<title>__arm64_sys_read (1,816,270 samples, 2.30%)</title><rect x="51.9" y="293" width="27.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="54.87" y="303.5" >_..</text>
</g>
<g >
<title>__check_object_size (1,648,869 samples, 2.09%)</title><rect x="989.1" y="197" width="24.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="992.13" y="207.5" >_..</text>
</g>
<g >
<title>spdlog::details::registry::instance (2,041,512 samples, 2.58%)</title><rect x="352.5" y="517" width="30.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="355.45" y="527.5" >sp..</text>
</g>
<g >
<title>read (15,898,623 samples, 20.13%)</title><rect x="383.0" y="501" width="237.5" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="385.95" y="511.5" >read</text>
</g>
<g >
<title>bprm_execve.part.0 (21,151 samples, 0.03%)</title><rect x="174.7" y="453" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="177.73" y="463.5" ></text>
</g>
<g >
<title>__sanitizer::MemoryMappingLayout::MemoryMappingLayout (1,816,270 samples, 2.30%)</title><rect x="51.9" y="469" width="27.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="54.87" y="479.5" >_..</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (1,851,756 samples, 2.34%)</title><rect x="711.1" y="453" width="27.6" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="714.08" y="463.5" >s..</text>
</g>
<g >
<title>setup_arg_pages (21,151 samples, 0.03%)</title><rect x="174.7" y="389" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="177.73" y="399.5" ></text>
</g>
<g >
<title>el0t_64_sync_handler (1,845,515 samples, 2.34%)</title><rect x="826.4" y="421" width="27.6" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="829.42" y="431.5" >e..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (1,851,756 samples, 2.34%)</title><rect x="711.1" y="485" width="27.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="714.08" y="495.5" >s..</text>
</g>
<g >
<title>vfs_read (1,816,270 samples, 2.30%)</title><rect x="51.9" y="261" width="27.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="54.87" y="271.5" >v..</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (11,875,945 samples, 15.03%)</title><rect x="175.0" y="453" width="177.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="178.04" y="463.5" >el0_svc_common.constpro..</text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1,724,057 samples, 2.18%)</title><rect x="854.0" y="453" width="25.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="856.99" y="463.5" >v..</text>
</g>
<g >
<title>[libc.so.6] (1,851,756 samples, 2.34%)</title><rect x="711.1" y="437" width="27.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="714.08" y="447.5" >[..</text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (2,041,512 samples, 2.58%)</title><rect x="352.5" y="325" width="30.5" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="355.45" y="335.5" >__..</text>
</g>
<g >
<title>fmt::v9::format_arg_store&lt;fmt::v9::basic_format_context&lt;fmt::v9::appender, char&gt;, std::remove_cv&lt;std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::type, std::remove_cv&lt;std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::type, std::remove_cv&lt;std::remove_reference&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt;::type&gt;::type&gt; fmt::v9::make_format_args&lt;fmt::v9::basic_format_context&lt;fmt::v9::appender, char&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (1,845,515 samples, 2.34%)</title><rect x="826.4" y="485" width="27.6" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="829.42" y="495.5" >f..</text>
</g>
<g >
<title>MemcmpInterceptorCommon (1,923,005 samples, 2.43%)</title><rect x="738.7" y="437" width="28.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="741.75" y="447.5" >Me..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (21,151 samples, 0.03%)</title><rect x="174.7" y="485" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="177.73" y="495.5" ></text>
</g>
<g >
<title>el0t_64_sync (1,053,639 samples, 1.33%)</title><rect x="33.7" y="517" width="15.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="36.74" y="527.5" ></text>
</g>
<g >
<title>invoke_syscall (3,628,708 samples, 4.59%)</title><rect x="989.1" y="325" width="54.2" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="992.13" y="335.5" >invok..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::rfind (5,869,161 samples, 7.43%)</title><rect x="738.7" y="501" width="87.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="741.75" y="511.5" >std::__cxx..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (3,070,882 samples, 3.89%)</title><rect x="79.0" y="485" width="45.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="82.01" y="495.5" >[ld-..</text>
</g>
<g >
<title>__asan_stack_malloc_2 (1,724,057 samples, 2.18%)</title><rect x="854.0" y="421" width="25.7" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="856.99" y="431.5" >_..</text>
</g>
<g >
<title>tt::chat::server::EpollServer::assign_username (2,128,354 samples, 2.69%)</title><rect x="1158.2" y="485" width="31.8" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1161.21" y="495.5" >tt..</text>
</g>
<g >
<title>__handle_mm_fault (1,053,639 samples, 1.33%)</title><rect x="33.7" y="405" width="15.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="36.74" y="415.5" ></text>
</g>
<g >
<title>__asan::AsanThread::SetThreadStackAndTls (1,816,270 samples, 2.30%)</title><rect x="51.9" y="517" width="27.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="54.87" y="527.5" >_..</text>
</g>
<g >
<title>aa_inet_msg_perm (2,054,401 samples, 2.60%)</title><rect x="589.8" y="277" width="30.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="592.76" y="287.5" >aa..</text>
</g>
<g >
<title>__asan::CreateMainThread (1,816,270 samples, 2.30%)</title><rect x="51.9" y="565" width="27.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="54.87" y="575.5" >_..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (2,041,512 samples, 2.58%)</title><rect x="352.5" y="453" width="30.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="355.45" y="463.5" >st..</text>
</g>
<g >
<title>__sanitizer::GetEnv (1,406,774 samples, 1.78%)</title><rect x="124.9" y="533" width="21.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="127.88" y="543.5" ></text>
</g>
<g >
<title>show_vma_header_prefix (1,816,270 samples, 2.30%)</title><rect x="51.9" y="181" width="27.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="54.87" y="191.5" >s..</text>
</g>
<g >
<title>operator new (2,041,512 samples, 2.58%)</title><rect x="352.5" y="373" width="30.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="355.45" y="383.5" >op..</text>
</g>
<g >
<title>[unknown] (21,151 samples, 0.03%)</title><rect x="174.7" y="613" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="177.73" y="623.5" ></text>
</g>
<g >
<title>do_el0_svc (11,827,320 samples, 14.97%)</title><rect x="443.8" y="437" width="176.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="446.77" y="447.5" >do_el0_svc</text>
</g>
<g >
<title>el0_svc (3,628,708 samples, 4.59%)</title><rect x="989.1" y="373" width="54.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="992.13" y="383.5" >el0_svc</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (11,023,885 samples, 13.96%)</title><rect x="10.0" y="597" width="164.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.05" y="607.5" >[ld-linux-aarch64.so.1]</text>
</g>
<g >
<title>epoll_pwait (11,875,945 samples, 15.03%)</title><rect x="175.0" y="533" width="177.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="178.04" y="543.5" >epoll_pwait</text>
</g>
<g >
<title>__sanitizer::ReadFromFile (1,816,270 samples, 2.30%)</title><rect x="51.9" y="421" width="27.1" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="54.87" y="431.5" >_..</text>
</g>
<g >
<title>do_pte_missing (2,041,512 samples, 2.58%)</title><rect x="352.5" y="101" width="30.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="355.45" y="111.5" >do..</text>
</g>
<g >
<title>_start (67,941,973 samples, 86.01%)</title><rect x="175.0" y="613" width="1015.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="178.04" y="623.5" >_start</text>
</g>
<g >
<title>__interception::InterceptFunction (3,070,882 samples, 3.89%)</title><rect x="79.0" y="533" width="45.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="82.01" y="543.5" >__in..</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (11,023,885 samples, 13.96%)</title><rect x="10.0" y="613" width="164.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.05" y="623.5" >[ld-linux-aarch64.so.1]</text>
</g>
<g >
<title>std::unordered_map&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator[] (1,969,431 samples, 2.49%)</title><rect x="879.7" y="485" width="29.5" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="882.75" y="495.5" >st..</text>
</g>
<g >
<title>do_mem_abort (2,041,512 samples, 2.58%)</title><rect x="352.5" y="197" width="30.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="355.45" y="207.5" >do..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1,969,431 samples, 2.49%)</title><rect x="879.7" y="469" width="29.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="882.75" y="479.5" >st..</text>
</g>
<g >
<title>__send (3,628,708 samples, 4.59%)</title><rect x="989.1" y="421" width="54.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="992.13" y="431.5" >__send</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (160,256 samples, 0.20%)</title><rect x="49.5" y="485" width="2.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="52.48" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::rfind (1,923,005 samples, 2.43%)</title><rect x="738.7" y="485" width="28.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="741.75" y="495.5" >st..</text>
</g>
<g >
<title>el0_svc (1,816,270 samples, 2.30%)</title><rect x="51.9" y="357" width="27.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="54.87" y="367.5" >e..</text>
</g>
<g >
<title>___interceptor_send.part.0 (8,981,089 samples, 11.37%)</title><rect x="909.2" y="437" width="134.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="912.17" y="447.5" >___interceptor_s..</text>
</g>
<g >
<title>seq_read (1,816,270 samples, 2.30%)</title><rect x="51.9" y="245" width="27.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="54.87" y="255.5" >s..</text>
</g>
<g >
<title>el0t_64_sync (160,256 samples, 0.20%)</title><rect x="49.5" y="453" width="2.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="52.48" y="463.5" ></text>
</g>
<g >
<title>vfs_read (9,883,645 samples, 12.51%)</title><rect x="472.8" y="357" width="147.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="475.81" y="367.5" >vfs_read</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (2,041,512 samples, 2.58%)</title><rect x="352.5" y="421" width="30.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="355.45" y="431.5" >st..</text>
</g>
<g >
<title>_dl_catch_exception (160,256 samples, 0.20%)</title><rect x="49.5" y="533" width="2.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="52.48" y="543.5" ></text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (2,799,981 samples, 3.54%)</title><rect x="10.0" y="581" width="41.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.05" y="591.5" >[ld..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (2,025,471 samples, 2.56%)</title><rect x="1127.9" y="469" width="30.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1130.95" y="479.5" >st..</text>
</g>
<g >
<title>el0t_64_sync_handler (11,875,945 samples, 15.03%)</title><rect x="175.0" y="501" width="177.5" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="178.04" y="511.5" >el0t_64_sync_handler</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (2,799,981 samples, 3.54%)</title><rect x="10.0" y="565" width="41.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.05" y="575.5" >[ld..</text>
</g>
<g >
<title>sock_recvmsg (8,001,831 samples, 10.13%)</title><rect x="500.9" y="325" width="119.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="503.92" y="335.5" >sock_recvmsg</text>
</g>
<g >
<title>[ld-linux-aarch64.so.1] (2,799,981 samples, 3.54%)</title><rect x="10.0" y="549" width="41.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.05" y="559.5" >[ld..</text>
</g>
<g >
<title>__sanitizer::GetThreadStackAndTls (1,816,270 samples, 2.30%)</title><rect x="51.9" y="501" width="27.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="54.87" y="511.5" >_..</text>
</g>
<g >
<title>do_epoll_pwait.part.0 (11,875,945 samples, 15.03%)</title><rect x="175.0" y="405" width="177.5" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="178.04" y="415.5" >do_epoll_pwait.part.0</text>
</g>
<g >
<title>__arm64_sys_sendto (1,648,869 samples, 2.09%)</title><rect x="989.1" y="309" width="24.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="992.13" y="319.5" >_..</text>
</g>
<g >
<title>el0t_64_sync_handler (1,053,639 samples, 1.33%)</title><rect x="33.7" y="501" width="15.8" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="36.74" y="511.5" ></text>
</g>
<g >
<title>__sanitizer::InternalAlloc (1,545,604 samples, 1.96%)</title><rect x="101.8" y="373" width="23.1" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="104.79" y="383.5" >_..</text>
</g>
<g >
<title>__sanitizer_internal_memset (1,545,604 samples, 1.96%)</title><rect x="101.8" y="341" width="23.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="104.79" y="351.5" >_..</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (11,827,320 samples, 14.97%)</title><rect x="443.8" y="421" width="176.7" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="446.77" y="431.5" >el0_svc_common.constpr..</text>
</g>
<g >
<title>skb_do_copy_data_nocache (1,648,869 samples, 2.09%)</title><rect x="989.1" y="213" width="24.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="992.13" y="223.5" >s..</text>
</g>
<g >
<title>___interceptor_read.part.0 (15,898,623 samples, 20.13%)</title><rect x="383.0" y="517" width="237.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="385.95" y="527.5" >___interceptor_read.part.0</text>
</g>
<g >
<title>do_pte_missing (1,053,639 samples, 1.33%)</title><rect x="33.7" y="373" width="15.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="36.74" y="383.5" ></text>
</g>
<g >
<title>ksys_read (1,816,270 samples, 2.30%)</title><rect x="51.9" y="277" width="27.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="54.87" y="287.5" >k..</text>
</g>
<g >
<title>__asan::asan_memalign (2,041,512 samples, 2.58%)</title><rect x="352.5" y="357" width="30.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="355.45" y="367.5" >__..</text>
</g>
<g >
<title>__asan_stack_malloc_2 (5,664,141 samples, 7.17%)</title><rect x="1043.3" y="421" width="84.6" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1046.33" y="431.5" >__asan_st..</text>
</g>
<g >
<title>bprm_execve (21,151 samples, 0.03%)</title><rect x="174.7" y="469" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="177.73" y="479.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (2,041,512 samples, 2.58%)</title><rect x="352.5" y="341" width="30.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="355.45" y="351.5" >__..</text>
</g>
<g >
<title>do_translation_fault (1,053,639 samples, 1.33%)</title><rect x="33.7" y="453" width="15.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="36.74" y="463.5" ></text>
</g>
<g >
<title>invoke_syscall (21,151 samples, 0.03%)</title><rect x="174.7" y="517" width="0.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="177.73" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;spdlog::logger&gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;spdlog::logger&gt; &gt; &gt; &gt;::operator[] (2,041,512 samples, 2.58%)</title><rect x="352.5" y="485" width="30.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="355.45" y="495.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1,851,756 samples, 2.34%)</title><rect x="711.1" y="469" width="27.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="714.08" y="479.5" >s..</text>
</g>
<g >
<title>__begin_current_label_crit_section (1,881,814 samples, 2.38%)</title><rect x="472.8" y="309" width="28.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="475.81" y="319.5" >_..</text>
</g>
<g >
<title>__sanitizer::ReadProcMaps (1,816,270 samples, 2.30%)</title><rect x="51.9" y="453" width="27.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="54.87" y="463.5" >_..</text>
</g>
<g >
<title>__arm64_sys_epoll_pwait (11,875,945 samples, 15.03%)</title><rect x="175.0" y="421" width="177.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="178.04" y="431.5" >__arm64_sys_epoll_pwait</text>
</g>
<g >
<title>next_uptodate_folio (1,053,639 samples, 1.33%)</title><rect x="33.7" y="325" width="15.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="36.74" y="335.5" ></text>
</g>
<g >
<title>sock_poll (4,017,273 samples, 5.09%)</title><rect x="263.3" y="325" width="60.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="266.32" y="335.5" >sock_p..</text>
</g>
<g >
<title>el0t_64_sync_handler (3,628,708 samples, 4.59%)</title><rect x="989.1" y="389" width="54.2" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="992.13" y="399.5" >el0t_..</text>
</g>
<g >
<title>dlsym (3,070,882 samples, 3.89%)</title><rect x="79.0" y="517" width="45.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="82.01" y="527.5" >dlsym</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (1,816,270 samples, 2.30%)</title><rect x="51.9" y="325" width="27.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="54.87" y="335.5" >e..</text>
</g>
<g >
<title>do_read_fault (1,053,639 samples, 1.33%)</title><rect x="33.7" y="357" width="15.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="36.74" y="367.5" ></text>
</g>
<g >
<title>handle_pte_fault (1,053,639 samples, 1.33%)</title><rect x="33.7" y="389" width="15.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="36.74" y="399.5" ></text>
</g>
<g >
<title>_dl_catch_exception (3,070,882 samples, 3.89%)</title><rect x="79.0" y="469" width="45.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="82.01" y="479.5" >_dl_..</text>
</g>
<g >
<title>el0t_64_sync (21,151 samples, 0.03%)</title><rect x="174.7" y="597" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="177.73" y="607.5" ></text>
</g>
<g >
<title>el0_svc (15,898,623 samples, 20.13%)</title><rect x="383.0" y="453" width="237.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="385.95" y="463.5" >el0_svc</text>
</g>
<g >
<title>tcp_sendmsg (1,648,869 samples, 2.09%)</title><rect x="989.1" y="245" width="24.7" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="992.13" y="255.5" >t..</text>
</g>
<g >
<title>inet_sendmsg (1,648,869 samples, 2.09%)</title><rect x="989.1" y="261" width="24.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="992.13" y="271.5" >i..</text>
</g>
</g>
</svg>
